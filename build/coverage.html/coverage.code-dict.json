{"/home/travis/build/npmtest/node-npmtest-noble/test.js":"/* istanbul instrument in package npmtest_noble */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-noble/lib.npmtest_noble.js":"/* istanbul instrument in package npmtest_noble */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_noble = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_noble = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-noble/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-noble && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_noble */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_noble\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_noble.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_noble.rollup.js'] =\n            local.assetsDict['/assets.npmtest_noble.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_noble.__dirname +\n                    '/lib.npmtest_noble.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/index.js":"var Noble = require('./lib/noble');\nvar bindings = require('./lib/resolve-bindings')();\n\nmodule.exports = new Noble(bindings);\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/noble.js":"var debug = require('debug')('noble');\n\nvar events = require('events');\nvar util = require('util');\n\nvar Peripheral = require('./peripheral');\nvar Service = require('./service');\nvar Characteristic = require('./characteristic');\nvar Descriptor = require('./descriptor');\n\nfunction Noble(bindings) {\n  this.state = 'unknown';\n  this.address = 'unknown';\n\n  this._bindings = bindings;\n  this._peripherals = {};\n  this._services = {};\n  this._characteristics = {};\n  this._descriptors = {};\n  this._discoveredPeripheralUUids = [];\n\n  this._bindings.on('stateChange', this.onStateChange.bind(this));\n  this._bindings.on('addressChange', this.onAddressChange.bind(this));\n  this._bindings.on('scanStart', this.onScanStart.bind(this));\n  this._bindings.on('scanStop', this.onScanStop.bind(this));\n  this._bindings.on('discover', this.onDiscover.bind(this));\n  this._bindings.on('connect', this.onConnect.bind(this));\n  this._bindings.on('disconnect', this.onDisconnect.bind(this));\n  this._bindings.on('rssiUpdate', this.onRssiUpdate.bind(this));\n  this._bindings.on('servicesDiscover', this.onServicesDiscover.bind(this));\n  this._bindings.on('includedServicesDiscover', this.onIncludedServicesDiscover.bind(this));\n  this._bindings.on('characteristicsDiscover', this.onCharacteristicsDiscover.bind(this));\n  this._bindings.on('read', this.onRead.bind(this));\n  this._bindings.on('write', this.onWrite.bind(this));\n  this._bindings.on('broadcast', this.onBroadcast.bind(this));\n  this._bindings.on('notify', this.onNotify.bind(this));\n  this._bindings.on('descriptorsDiscover', this.onDescriptorsDiscover.bind(this));\n  this._bindings.on('valueRead', this.onValueRead.bind(this));\n  this._bindings.on('valueWrite', this.onValueWrite.bind(this));\n  this._bindings.on('handleRead', this.onHandleRead.bind(this));\n  this._bindings.on('handleWrite', this.onHandleWrite.bind(this));\n  this._bindings.on('handleNotify', this.onHandleNotify.bind(this));\n\n  this.on('warning', function(message) {\n    if (this.listeners('warning').length === 1) {\n      console.warn('noble: ' + message);\n    }\n  }.bind(this));\n\n  this._bindings.init();\n}\n\nutil.inherits(Noble, events.EventEmitter);\n\nNoble.prototype.onStateChange = function(state) {\n  debug('stateChange ' + state);\n\n  this.state = state;\n\n  this.emit('stateChange', state);\n};\n\nNoble.prototype.onAddressChange = function(address) {\n  debug('addressChange ' + address);\n\n  this.address = address;\n};\n\nNoble.prototype.startScanning = function(serviceUuids, allowDuplicates, callback) {\n  if (this.state !== 'poweredOn') {\n    var error = new Error('Could not start scanning, state is ' + this.state + ' (not poweredOn)');\n\n    if (typeof callback === 'function') {\n      callback(error);\n    } else {\n      throw error;\n    }\n  } else {\n    if (callback) {\n      this.once('scanStart', function(filterDuplicates) {\n        callback(null, filterDuplicates);\n      });\n    }\n\n    this._discoveredPeripheralUUids = [];\n    this._allowDuplicates = allowDuplicates;\n\n    this._bindings.startScanning(serviceUuids, allowDuplicates);\n  }\n};\n\nNoble.prototype.onScanStart = function(filterDuplicates) {\n  debug('scanStart');\n  this.emit('scanStart', filterDuplicates);\n};\n\nNoble.prototype.stopScanning = function(callback) {\n  if (callback) {\n    this.once('scanStop', callback);\n  }\n  this._bindings.stopScanning();\n};\n\nNoble.prototype.onScanStop = function() {\n  debug('scanStop');\n  this.emit('scanStop');\n};\n\nNoble.prototype.onDiscover = function(uuid, address, addressType, connectable, advertisement, rssi) {\n  var peripheral = this._peripherals[uuid];\n\n  if (!peripheral) {\n    peripheral = new Peripheral(this, uuid, address, addressType, connectable, advertisement, rssi);\n\n    this._peripherals[uuid] = peripheral;\n    this._services[uuid] = {};\n    this._characteristics[uuid] = {};\n    this._descriptors[uuid] = {};\n  } else {\n    // \"or\" the advertisment data with existing\n    for (var i in advertisement) {\n      if (advertisement[i] !== undefined) {\n        peripheral.advertisement[i] = advertisement[i];\n      }\n    }\n\n    peripheral.rssi = rssi;\n  }\n\n  var previouslyDiscoverd = (this._discoveredPeripheralUUids.indexOf(uuid) !== -1);\n\n  if (!previouslyDiscoverd) {\n    this._discoveredPeripheralUUids.push(uuid);\n  }\n\n  if (this._allowDuplicates || !previouslyDiscoverd) {\n    this.emit('discover', peripheral);\n  }\n};\n\nNoble.prototype.connect = function(peripheralUuid) {\n  this._bindings.connect(peripheralUuid);\n};\n\nNoble.prototype.onConnect = function(peripheralUuid, error) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    peripheral.state = error ? 'error' : 'connected';\n    peripheral.emit('connect', error);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' connected!');\n  }\n};\n\nNoble.prototype.disconnect = function(peripheralUuid) {\n  this._bindings.disconnect(peripheralUuid);\n};\n\nNoble.prototype.onDisconnect = function(peripheralUuid) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    peripheral.state = 'disconnected';\n    peripheral.emit('disconnect');\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' disconnected!');\n  }\n};\n\nNoble.prototype.updateRssi = function(peripheralUuid) {\n  this._bindings.updateRssi(peripheralUuid);\n};\n\nNoble.prototype.onRssiUpdate = function(peripheralUuid, rssi) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    peripheral.rssi = rssi;\n\n    peripheral.emit('rssiUpdate', rssi);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' RSSI update!');\n  }\n};\n\nNoble.prototype.discoverServices = function(peripheralUuid, uuids) {\n  this._bindings.discoverServices(peripheralUuid, uuids);\n};\n\nNoble.prototype.onServicesDiscover = function(peripheralUuid, serviceUuids) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    var services = [];\n\n    for (var i = 0; i < serviceUuids.length; i++) {\n      var serviceUuid = serviceUuids[i];\n      var service = new Service(this, peripheralUuid, serviceUuid);\n\n      this._services[peripheralUuid][serviceUuid] = service;\n      this._characteristics[peripheralUuid][serviceUuid] = {};\n      this._descriptors[peripheralUuid][serviceUuid] = {};\n\n      services.push(service);\n    }\n\n    peripheral.services = services;\n\n    peripheral.emit('servicesDiscover', services);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' services discover!');\n  }\n};\n\nNoble.prototype.discoverIncludedServices = function(peripheralUuid, serviceUuid, serviceUuids) {\n  this._bindings.discoverIncludedServices(peripheralUuid, serviceUuid, serviceUuids);\n};\n\nNoble.prototype.onIncludedServicesDiscover = function(peripheralUuid, serviceUuid, includedServiceUuids) {\n  var service = this._services[peripheralUuid][serviceUuid];\n\n  if (service) {\n    service.includedServiceUuids = includedServiceUuids;\n\n    service.emit('includedServicesDiscover', includedServiceUuids);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ' included services discover!');\n  }\n};\n\nNoble.prototype.discoverCharacteristics = function(peripheralUuid, serviceUuid, characteristicUuids) {\n  this._bindings.discoverCharacteristics(peripheralUuid, serviceUuid, characteristicUuids);\n};\n\nNoble.prototype.onCharacteristicsDiscover = function(peripheralUuid, serviceUuid, characteristics) {\n  var service = this._services[peripheralUuid][serviceUuid];\n\n  if (service) {\n    var characteristics_ = [];\n\n    for (var i = 0; i < characteristics.length; i++) {\n      var characteristicUuid = characteristics[i].uuid;\n\n      var characteristic = new Characteristic(\n                                this,\n                                peripheralUuid,\n                                serviceUuid,\n                                characteristicUuid,\n                                characteristics[i].properties\n                            );\n\n      this._characteristics[peripheralUuid][serviceUuid][characteristicUuid] = characteristic;\n      this._descriptors[peripheralUuid][serviceUuid][characteristicUuid] = {};\n\n      characteristics_.push(characteristic);\n    }\n\n    service.characteristics = characteristics_;\n\n    service.emit('characteristicsDiscover', characteristics_);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ' characteristics discover!');\n  }\n};\n\nNoble.prototype.read = function(peripheralUuid, serviceUuid, characteristicUuid) {\n   this._bindings.read(peripheralUuid, serviceUuid, characteristicUuid);\n};\n\nNoble.prototype.onRead = function(peripheralUuid, serviceUuid, characteristicUuid, data, isNotification) {\n  var characteristic = this._characteristics[peripheralUuid][serviceUuid][characteristicUuid];\n\n  if (characteristic) {\n    characteristic.emit('data', data, isNotification);\n\n    characteristic.emit('read', data, isNotification); // for backwards compatbility\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ' read!');\n  }\n};\n\nNoble.prototype.write = function(peripheralUuid, serviceUuid, characteristicUuid, data, withoutResponse) {\n   this._bindings.write(peripheralUuid, serviceUuid, characteristicUuid, data, withoutResponse);\n};\n\nNoble.prototype.onWrite = function(peripheralUuid, serviceUuid, characteristicUuid) {\n  var characteristic = this._characteristics[peripheralUuid][serviceUuid][characteristicUuid];\n\n  if (characteristic) {\n    characteristic.emit('write');\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ' write!');\n  }\n};\n\nNoble.prototype.broadcast = function(peripheralUuid, serviceUuid, characteristicUuid, broadcast) {\n   this._bindings.broadcast(peripheralUuid, serviceUuid, characteristicUuid, broadcast);\n};\n\nNoble.prototype.onBroadcast = function(peripheralUuid, serviceUuid, characteristicUuid, state) {\n  var characteristic = this._characteristics[peripheralUuid][serviceUuid][characteristicUuid];\n\n  if (characteristic) {\n    characteristic.emit('broadcast', state);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ' broadcast!');\n  }\n};\n\nNoble.prototype.notify = function(peripheralUuid, serviceUuid, characteristicUuid, notify) {\n   this._bindings.notify(peripheralUuid, serviceUuid, characteristicUuid, notify);\n};\n\nNoble.prototype.onNotify = function(peripheralUuid, serviceUuid, characteristicUuid, state) {\n  var characteristic = this._characteristics[peripheralUuid][serviceUuid][characteristicUuid];\n\n  if (characteristic) {\n    characteristic.emit('notify', state);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ' notify!');\n  }\n};\n\nNoble.prototype.discoverDescriptors = function(peripheralUuid, serviceUuid, characteristicUuid) {\n  this._bindings.discoverDescriptors(peripheralUuid, serviceUuid, characteristicUuid);\n};\n\nNoble.prototype.onDescriptorsDiscover = function(peripheralUuid, serviceUuid, characteristicUuid, descriptors) {\n  var characteristic = this._characteristics[peripheralUuid][serviceUuid][characteristicUuid];\n\n  if (characteristic) {\n    var descriptors_ = [];\n\n    for (var i = 0; i < descriptors.length; i++) {\n      var descriptorUuid = descriptors[i];\n\n      var descriptor = new Descriptor(\n                            this,\n                            peripheralUuid,\n                            serviceUuid,\n                            characteristicUuid,\n                            descriptorUuid\n                        );\n\n      this._descriptors[peripheralUuid][serviceUuid][characteristicUuid][descriptorUuid] = descriptor;\n\n      descriptors_.push(descriptor);\n    }\n\n    characteristic.descriptors = descriptors_;\n\n    characteristic.emit('descriptorsDiscover', descriptors_);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ' descriptors discover!');\n  }\n};\n\nNoble.prototype.readValue = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {\n  this._bindings.readValue(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid);\n};\n\nNoble.prototype.onValueRead = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {\n  var descriptor = this._descriptors[peripheralUuid][serviceUuid][characteristicUuid][descriptorUuid];\n\n  if (descriptor) {\n    descriptor.emit('valueRead', data);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ', ' + descriptorUuid + ' value read!');\n  }\n};\n\nNoble.prototype.writeValue = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {\n  this._bindings.writeValue(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data);\n};\n\nNoble.prototype.onValueWrite = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {\n  var descriptor = this._descriptors[peripheralUuid][serviceUuid][characteristicUuid][descriptorUuid];\n\n  if (descriptor) {\n    descriptor.emit('valueWrite');\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ', ' + serviceUuid + ', ' + characteristicUuid + ', ' + descriptorUuid + ' value write!');\n  }\n};\n\nNoble.prototype.readHandle = function(peripheralUuid, handle) {\n  this._bindings.readHandle(peripheralUuid, handle);\n};\n\nNoble.prototype.onHandleRead = function(peripheralUuid, handle, data) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    peripheral.emit('handleRead' + handle, data);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' handle read!');\n  }\n};\n\nNoble.prototype.writeHandle = function(peripheralUuid, handle, data, withoutResponse) {\n  this._bindings.writeHandle(peripheralUuid, handle, data, withoutResponse);\n};\n\nNoble.prototype.onHandleWrite = function(peripheralUuid, handle) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    peripheral.emit('handleWrite' + handle);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' handle write!');\n  }\n};\n\nNoble.prototype.onHandleNotify = function(peripheralUuid, handle, data) {\n  var peripheral = this._peripherals[peripheralUuid];\n\n  if (peripheral) {\n    peripheral.emit('handleNotify', handle, data);\n  } else {\n    this.emit('warning', 'unknown peripheral ' + peripheralUuid + ' handle notify!');\n  }\n};\n\nmodule.exports = Noble;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/peripheral.js":"/*jshint loopfunc: true */\nvar debug = require('debug')('peripheral');\n\nvar events = require('events');\nvar util = require('util');\n\nfunction Peripheral(noble, id, address, addressType, connectable, advertisement, rssi) {\n  this._noble = noble;\n\n  this.id = id;\n  this.uuid = id; // for legacy\n  this.address = address;\n  this.addressType = addressType;\n  this.connectable = connectable;\n  this.advertisement = advertisement;\n  this.rssi = rssi;\n  this.services = null;\n  this.state = 'disconnected';\n}\n\nutil.inherits(Peripheral, events.EventEmitter);\n\nPeripheral.prototype.toString = function() {\n  return JSON.stringify({\n    id: this.id,\n    address: this.address,\n    addressType: this.addressType,\n    connectable: this.connectable,\n    advertisement: this.advertisement,\n    rssi: this.rssi,\n    state: this.state\n  });\n};\n\nPeripheral.prototype.connect = function(callback) {\n  if (callback) {\n    this.once('connect', function(error) {\n      callback(error);\n    });\n  }\n\n  if (this.state === 'connected') {\n    this.emit('connect', new Error('Peripheral already connected'));\n  } else {\n    this.state = 'connecting';\n    this._noble.connect(this.id);\n  }\n};\n\nPeripheral.prototype.disconnect = function(callback) {\n  if (callback) {\n    this.once('disconnect', function() {\n      callback(null);\n    });\n  }\n  this.state = 'disconnecting';\n  this._noble.disconnect(this.id);\n};\n\nPeripheral.prototype.updateRssi = function(callback) {\n  if (callback) {\n    this.once('rssiUpdate', function(rssi) {\n      callback(null, rssi);\n    });\n  }\n\n  this._noble.updateRssi(this.id);\n};\n\nPeripheral.prototype.discoverServices = function(uuids, callback) {\n  if (callback) {\n    this.once('servicesDiscover', function(services) {\n      callback(null, services);\n    });\n  }\n\n  this._noble.discoverServices(this.id, uuids);\n};\n\nPeripheral.prototype.discoverSomeServicesAndCharacteristics = function(serviceUuids, characteristicsUuids, callback) {\n  this.discoverServices(serviceUuids, function(err, services) {\n    var numDiscovered = 0;\n    var allCharacteristics = [];\n\n    for (var i in services) {\n      var service = services[i];\n\n      service.discoverCharacteristics(characteristicsUuids, function(error, characteristics) {\n        numDiscovered++;\n\n        if (error === null) {\n          for (var j in characteristics) {\n            var characteristic = characteristics[j];\n\n            allCharacteristics.push(characteristic);\n          }\n        }\n\n        if (numDiscovered === services.length) {\n          if (callback) {\n            callback(null, services, allCharacteristics);\n          }\n        }\n      }.bind(this));\n    }\n  }.bind(this));\n};\n\nPeripheral.prototype.discoverAllServicesAndCharacteristics = function(callback) {\n  this.discoverSomeServicesAndCharacteristics([], [], callback);\n};\n\nPeripheral.prototype.readHandle = function(handle, callback) {\n  if (callback) {\n    this.once('handleRead' + handle, function(data) {\n      callback(null, data);\n    });\n  }\n\n  this._noble.readHandle(this.id, handle);\n};\n\nPeripheral.prototype.writeHandle = function(handle, data, withoutResponse, callback) {\n  if (!(data instanceof Buffer)) {\n    throw new Error('data must be a Buffer');\n  }\n\n  if (callback) {\n    this.once('handleWrite' + handle, function() {\n      callback(null);\n    });\n  }\n\n  this._noble.writeHandle(this.id, handle, data, withoutResponse);\n};\n\nmodule.exports = Peripheral;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/service.js":"var debug = require('debug')('service');\n\nvar events = require('events');\nvar util = require('util');\n\nvar services = require('./services.json');\n\nfunction Service(noble, peripheralId, uuid) {\n  this._noble = noble;\n  this._peripheralId = peripheralId;\n\n  this.uuid = uuid;\n  this.name = null;\n  this.type = null;\n  this.includedServiceUuids = null;\n  this.characteristics = null;\n\n  var service = services[uuid];\n  if (service) {\n    this.name = service.name;\n    this.type = service.type;\n  }\n}\n\nutil.inherits(Service, events.EventEmitter);\n\nService.prototype.toString = function() {\n  return JSON.stringify({\n    uuid: this.uuid,\n    name: this.name,\n    type: this.type,\n    includedServiceUuids: this.includedServiceUuids\n  });\n};\n\nService.prototype.discoverIncludedServices = function(serviceUuids, callback) {\n  if (callback) {\n    this.once('includedServicesDiscover', function(includedServiceUuids) {\n      callback(null, includedServiceUuids);\n    });\n  }\n\n  this._noble.discoverIncludedServices(\n    this._peripheralId,\n    this.uuid,\n    serviceUuids\n  );\n};\n\nService.prototype.discoverCharacteristics = function(characteristicUuids, callback) {\n  if (callback) {\n    this.once('characteristicsDiscover', function(characteristics) {\n      callback(null, characteristics);\n    });\n  }\n\n  this._noble.discoverCharacteristics(\n    this._peripheralId,\n    this.uuid,\n    characteristicUuids\n  );\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/characteristic.js":"var debug = require('debug')('characteristic');\n\nvar events = require('events');\nvar util = require('util');\n\nvar characteristics = require('./characteristics.json');\n\nfunction Characteristic(noble, peripheralId, serviceUuid, uuid, properties) {\n  this._noble = noble;\n  this._peripheralId = peripheralId;\n  this._serviceUuid = serviceUuid;\n\n  this.uuid = uuid;\n  this.name = null;\n  this.type = null;\n  this.properties = properties;\n  this.descriptors = null;\n\n  var characteristic = characteristics[uuid];\n  if (characteristic) {\n    this.name = characteristic.name;\n    this.type = characteristic.type;\n  }\n}\n\nutil.inherits(Characteristic, events.EventEmitter);\n\nCharacteristic.prototype.toString = function() {\n  return JSON.stringify({\n    uuid: this.uuid,\n    name: this.name,\n    type: this.type,\n    properties: this.properties\n  });\n};\n\nCharacteristic.prototype.read = function(callback) {\n  if (callback) {\n    var onRead = function(data, isNotificaton) {\n      // only call the callback if 'read' event and non-notification\n      // 'read' for non-notifications is only present for backwards compatbility\n      if (!isNotificaton) {\n        // remove the listener\n        this.removeListener('read', onRead);\n\n        // call the callback\n        callback(null, data);\n      }\n    }.bind(this);\n\n    this.on('read', onRead);\n  }\n\n  this._noble.read(\n    this._peripheralId,\n    this._serviceUuid,\n    this.uuid\n  );\n};\n\nCharacteristic.prototype.write = function(data, withoutResponse, callback) {\n  if (process.title !== 'browser') {\n    if (!(data instanceof Buffer)) {\n      throw new Error('data must be a Buffer');\n    }\n  }\n\n  if (callback) {\n    this.once('write', function() {\n      callback(null);\n    });\n  }\n\n  this._noble.write(\n    this._peripheralId,\n    this._serviceUuid,\n    this.uuid,\n    data,\n    withoutResponse\n  );\n};\n\nCharacteristic.prototype.broadcast = function(broadcast, callback) {\n  if (callback) {\n    this.once('broadcast', function() {\n      callback(null);\n    });\n  }\n\n  this._noble.broadcast(\n    this._peripheralId,\n    this._serviceUuid,\n    this.uuid,\n    broadcast\n  );\n};\n\n// deprecated in favour of subscribe/unsubscribe\nCharacteristic.prototype.notify = function(notify, callback) {\n  if (callback) {\n    this.once('notify', function() {\n      callback(null);\n    });\n  }\n\n  this._noble.notify(\n    this._peripheralId,\n    this._serviceUuid,\n    this.uuid,\n    notify\n  );\n};\n\nCharacteristic.prototype.subscribe = function(callback) {\n  this.notify(true, callback);\n};\n\nCharacteristic.prototype.unsubscribe = function(callback) {\n  this.notify(false, callback);\n};\n\nCharacteristic.prototype.discoverDescriptors = function(callback) {\n  if (callback) {\n    this.once('descriptorsDiscover', function(descriptors) {\n      callback(null, descriptors);\n    });\n  }\n\n  this._noble.discoverDescriptors(\n    this._peripheralId,\n    this._serviceUuid,\n    this.uuid\n  );\n};\n\nmodule.exports = Characteristic;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/descriptor.js":"var debug = require('debug')('descriptor');\n\nvar events = require('events');\nvar util = require('util');\n\nvar descriptors = require('./descriptors.json');\n\nfunction Descriptor(noble, peripheralId, serviceUuid, characteristicUuid, uuid) {\n  this._noble = noble;\n  this._peripheralId = peripheralId;\n  this._serviceUuid = serviceUuid;\n  this._characteristicUuid = characteristicUuid;\n\n  this.uuid = uuid;\n  this.name = null;\n  this.type = null;\n\n  var descriptor = descriptors[uuid];\n  if (descriptor) {\n    this.name = descriptor.name;\n    this.type = descriptor.type;\n  }\n}\n\nutil.inherits(Descriptor, events.EventEmitter);\n\nDescriptor.prototype.toString = function() {\n  return JSON.stringify({\n    uuid: this.uuid,\n    name: this.name,\n    type: this.type\n  });\n};\n\nDescriptor.prototype.readValue = function(callback) {\n  if (callback) {\n    this.once('valueRead', function(data) {\n      callback(null, data);\n    });\n  }\n  this._noble.readValue(\n    this._peripheralId,\n    this._serviceUuid,\n    this._characteristicUuid,\n    this.uuid\n  );\n};\n\nDescriptor.prototype.writeValue = function(data, callback) {\n  if (!(data instanceof Buffer)) {\n    throw new Error('data must be a Buffer');\n  }\n\n  if (callback) {\n    this.once('valueWrite', function() {\n      callback(null);\n    });\n  }\n  this._noble.writeValue(\n    this._peripheralId,\n    this._serviceUuid,\n    this._characteristicUuid,\n    this.uuid,\n    data\n  );\n};\n\nmodule.exports = Descriptor;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/resolve-bindings.js":"var os = require('os');\n\nmodule.exports = function() {\n  var platform = os.platform();\n\n  if (process.env.NOBLE_WEBSOCKET) {\n    return require('./websocket/bindings');\n  } else if (process.env.NOBLE_DISTRIBUTED) {\n    return require('./distributed/bindings');\n  } else if (platform === 'darwin') {\n    return require('./mac/bindings');\n  } else if (platform === 'linux' || platform === 'freebsd' || platform === 'win32') {\n    return require('./hci-socket/bindings');\n  } else {\n    throw new Error('Unsupported platform');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/bindings.js":"var debug = require('debug')('bindings');\n\nvar events = require('events');\nvar util = require('util');\n\nvar AclStream = require('./acl-stream');\nvar Gatt = require('./gatt');\nvar Gap = require('./gap');\nvar Hci = require('./hci');\nvar Signaling = require('./signaling');\n\n\nvar NobleBindings = function() {\n  this._state = null;\n\n  this._addresses = {};\n  this._addresseTypes = {};\n  this._connectable = {};\n\n  this._pendingConnectionUuid = null;\n  this._connectionQueue = [];\n\n  this._handles = {};\n  this._gatts = {};\n  this._aclStreams = {};\n  this._signalings = {};\n\n  this._hci = new Hci();\n  this._gap = new Gap(this._hci);\n};\n\nutil.inherits(NobleBindings, events.EventEmitter);\n\n\nNobleBindings.prototype.startScanning = function(serviceUuids, allowDuplicates) {\n  this._scanServiceUuids = serviceUuids || [];\n\n  this._gap.startScanning(allowDuplicates);\n};\n\nNobleBindings.prototype.stopScanning = function() {\n  this._gap.stopScanning();\n};\n\nNobleBindings.prototype.connect = function(peripheralUuid) {\n  var address = this._addresses[peripheralUuid];\n  var addressType = this._addresseTypes[peripheralUuid];\n\n  if (!this._pendingConnectionUuid) {\n    this._pendingConnectionUuid = peripheralUuid;\n\n    this._hci.createLeConn(address, addressType);\n  } else {\n    this._connectionQueue.push(peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.disconnect = function(peripheralUuid) {\n  this._hci.disconnect(this._handles[peripheralUuid]);\n};\n\nNobleBindings.prototype.updateRssi = function(peripheralUuid) {\n  this._hci.readRssi(this._handles[peripheralUuid]);\n};\n\nNobleBindings.prototype.init = function() {\n  this.onSigIntBinded = this.onSigInt.bind(this);\n\n  this._gap.on('scanStart', this.onScanStart.bind(this));\n  this._gap.on('scanStop', this.onScanStop.bind(this));\n  this._gap.on('discover', this.onDiscover.bind(this));\n\n  this._hci.on('stateChange', this.onStateChange.bind(this));\n  this._hci.on('addressChange', this.onAddressChange.bind(this));\n  this._hci.on('leConnComplete', this.onLeConnComplete.bind(this));\n  this._hci.on('leConnUpdateComplete', this.onLeConnUpdateComplete.bind(this));\n  this._hci.on('rssiRead', this.onRssiRead.bind(this));\n  this._hci.on('disconnComplete', this.onDisconnComplete.bind(this));\n  this._hci.on('encryptChange', this.onEncryptChange.bind(this));\n  this._hci.on('aclDataPkt', this.onAclDataPkt.bind(this));\n\n  this._hci.init();\n\n  /* Add exit handlers after `init()` has completed. If no adaptor\n  is present it can throw an exception - in which case we don't\n  want to try and clear up afterwards (issue #502) */\n  process.on('SIGINT', this.onSigIntBinded);\n  process.on('exit', this.onExit.bind(this));\n};\n\nNobleBindings.prototype.onSigInt = function() {\n  var sigIntListeners = process.listeners('SIGINT');\n\n  if (sigIntListeners[sigIntListeners.length - 1] === this.onSigIntBinded) {\n    // we are the last listener, so exit\n    // this will trigger onExit, and clean up\n    process.exit(1);\n  }\n};\n\nNobleBindings.prototype.onExit = function() {\n  this.stopScanning();\n\n  for (var handle in this._aclStreams) {\n    this._hci.disconnect(handle);\n  }\n};\n\nNobleBindings.prototype.onStateChange = function(state) {\n  if (this._state === state) {\n    return;\n  }\n  this._state = state;\n\n\n  if (state === 'unauthorized') {\n    console.log('noble warning: adapter state unauthorized, please run as root or with sudo');\n    console.log('               or see README for information on running without root/sudo:');\n    console.log('               https://github.com/sandeepmistry/noble#running-on-linux');\n  } else if (state === 'unsupported') {\n    console.log('noble warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).');\n    console.log('               Try to run with environment variable:');\n    console.log('               [sudo] NOBLE_HCI_DEVICE_ID=x node ...');\n  }\n\n  this.emit('stateChange', state);\n};\n\nNobleBindings.prototype.onAddressChange = function(address) {\n  this.emit('addressChange', address);\n};\n\nNobleBindings.prototype.onScanStart = function(filterDuplicates) {\n  this.emit('scanStart', filterDuplicates);\n};\n\nNobleBindings.prototype.onScanStop = function() {\n  this.emit('scanStop');\n};\n\nNobleBindings.prototype.onDiscover = function(status, address, addressType, connectable, advertisement, rssi) {\n  if (this._scanServiceUuids === undefined) {\n    return;\n  }\n\n  var serviceUuids = advertisement.serviceUuids || [];\n  var serviceData = advertisement.serviceData || [];\n  var hasScanServiceUuids = (this._scanServiceUuids.length === 0);\n\n  if (!hasScanServiceUuids) {\n    var i;\n\n    serviceUuids = serviceUuids.slice();\n\n    for (i in serviceData) {\n      serviceUuids.push(serviceData[i].uuid);\n    }\n\n    for (i in serviceUuids) {\n      hasScanServiceUuids = (this._scanServiceUuids.indexOf(serviceUuids[i]) !== -1);\n\n      if (hasScanServiceUuids) {\n        break;\n      }\n    }\n  }\n\n  if (hasScanServiceUuids) {\n    var uuid = address.split(':').join('');\n    this._addresses[uuid] = address;\n    this._addresseTypes[uuid] = addressType;\n    this._connectable[uuid] = connectable;\n\n    this.emit('discover', uuid, address, addressType, connectable, advertisement, rssi);\n  }\n};\n\nNobleBindings.prototype.onLeConnComplete = function(status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy) {\n  var uuid = null;\n\n  var error = null;\n\n  if (status === 0) {\n    uuid = address.split(':').join('').toLowerCase();\n\n    var aclStream = new AclStream(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);\n    var gatt = new Gatt(address, aclStream);\n    var signaling = new Signaling(handle, aclStream);\n\n    this._gatts[uuid] = this._gatts[handle] = gatt;\n    this._signalings[uuid] = this._signalings[handle] = signaling;\n    this._aclStreams[handle] = aclStream;\n    this._handles[uuid] = handle;\n    this._handles[handle] = uuid;\n\n    this._gatts[handle].on('mtu', this.onMtu.bind(this));\n    this._gatts[handle].on('servicesDiscover', this.onServicesDiscovered.bind(this));\n    this._gatts[handle].on('includedServicesDiscover', this.onIncludedServicesDiscovered.bind(this));\n    this._gatts[handle].on('characteristicsDiscover', this.onCharacteristicsDiscovered.bind(this));\n    this._gatts[handle].on('read', this.onRead.bind(this));\n    this._gatts[handle].on('write', this.onWrite.bind(this));\n    this._gatts[handle].on('broadcast', this.onBroadcast.bind(this));\n    this._gatts[handle].on('notify', this.onNotify.bind(this));\n    this._gatts[handle].on('notification', this.onNotification.bind(this));\n    this._gatts[handle].on('descriptorsDiscover', this.onDescriptorsDiscovered.bind(this));\n    this._gatts[handle].on('valueRead', this.onValueRead.bind(this));\n    this._gatts[handle].on('valueWrite', this.onValueWrite.bind(this));\n    this._gatts[handle].on('handleRead', this.onHandleRead.bind(this));\n    this._gatts[handle].on('handleWrite', this.onHandleWrite.bind(this));\n    this._gatts[handle].on('handleNotify', this.onHandleNotify.bind(this));\n\n    this._signalings[handle].on('connectionParameterUpdateRequest', this.onConnectionParameterUpdateRequest.bind(this));\n\n    this._gatts[handle].exchangeMtu(256);\n  } else {\n    uuid = this._pendingConnectionUuid;\n    var statusMessage = Hci.STATUS_MAPPER[status] || 'HCI Error: Unknown';\n    var errorCode = ' (0x' + status.toString(16) + ')';\n    statusMessage = statusMessage + errorCode;\n    error = new Error(statusMessage);\n  }\n\n  this.emit('connect', uuid, error);\n\n  if (this._connectionQueue.length > 0) {\n    var peripheralUuid = this._connectionQueue.shift();\n\n    address = this._addresses[peripheralUuid];\n    addressType = this._addresseTypes[peripheralUuid];\n\n    this._pendingConnectionUuid = peripheralUuid;\n\n    this._hci.createLeConn(address, addressType);\n  } else {\n    this._pendingConnectionUuid = null;\n  }\n};\n\nNobleBindings.prototype.onLeConnUpdateComplete = function(handle, interval, latency, supervisionTimeout) {\n  // no-op\n};\n\nNobleBindings.prototype.onDisconnComplete = function(handle, reason) {\n  var uuid = this._handles[handle];\n\n  if (uuid) {\n    this._aclStreams[handle].push(null, null);\n    this._gatts[handle].removeAllListeners();\n    this._signalings[handle].removeAllListeners();\n\n    delete this._gatts[uuid];\n    delete this._gatts[handle];\n    delete this._signalings[uuid];\n    delete this._signalings[handle];\n    delete this._aclStreams[handle];\n    delete this._handles[uuid];\n    delete this._handles[handle];\n\n    this.emit('disconnect', uuid); // TODO: handle reason?\n  } else {\n    console.warn('noble warning: unknown handle ' + handle + ' disconnected!');\n  }\n};\n\nNobleBindings.prototype.onEncryptChange = function(handle, encrypt) {\n  var aclStream = this._aclStreams[handle];\n\n  if (aclStream) {\n    aclStream.pushEncrypt(encrypt);\n  }\n};\n\nNobleBindings.prototype.onMtu = function(address, mtu) {\n\n};\n\nNobleBindings.prototype.onRssiRead = function(handle, rssi) {\n  this.emit('rssiUpdate', this._handles[handle], rssi);\n};\n\n\nNobleBindings.prototype.onAclDataPkt = function(handle, cid, data) {\n  var aclStream = this._aclStreams[handle];\n\n  if (aclStream) {\n    aclStream.push(cid, data);\n  }\n};\n\n\nNobleBindings.prototype.discoverServices = function(peripheralUuid, uuids) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.discoverServices(uuids || []);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onServicesDiscovered = function(address, serviceUuids) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('servicesDiscover', uuid, serviceUuids);\n};\n\nNobleBindings.prototype.discoverIncludedServices = function(peripheralUuid, serviceUuid, serviceUuids) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.discoverIncludedServices(serviceUuid, serviceUuids || []);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onIncludedServicesDiscovered = function(address, serviceUuid, includedServiceUuids) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('includedServicesDiscover', uuid, serviceUuid, includedServiceUuids);\n};\n\nNobleBindings.prototype.discoverCharacteristics = function(peripheralUuid, serviceUuid, characteristicUuids) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.discoverCharacteristics(serviceUuid, characteristicUuids || []);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onCharacteristicsDiscovered = function(address, serviceUuid, characteristics) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('characteristicsDiscover', uuid, serviceUuid, characteristics);\n};\n\nNobleBindings.prototype.read = function(peripheralUuid, serviceUuid, characteristicUuid) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.read(serviceUuid, characteristicUuid);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onRead = function(address, serviceUuid, characteristicUuid, data) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('read', uuid, serviceUuid, characteristicUuid, data, false);\n};\n\nNobleBindings.prototype.write = function(peripheralUuid, serviceUuid, characteristicUuid, data, withoutResponse) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.write(serviceUuid, characteristicUuid, data, withoutResponse);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onWrite = function(address, serviceUuid, characteristicUuid) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('write', uuid, serviceUuid, characteristicUuid);\n};\n\nNobleBindings.prototype.broadcast = function(peripheralUuid, serviceUuid, characteristicUuid, broadcast) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.broadcast(serviceUuid, characteristicUuid, broadcast);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onBroadcast = function(address, serviceUuid, characteristicUuid, state) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('broadcast', uuid, serviceUuid, characteristicUuid, state);\n};\n\nNobleBindings.prototype.notify = function(peripheralUuid, serviceUuid, characteristicUuid, notify) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.notify(serviceUuid, characteristicUuid, notify);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onNotify = function(address, serviceUuid, characteristicUuid, state) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('notify', uuid, serviceUuid, characteristicUuid, state);\n};\n\nNobleBindings.prototype.onNotification = function(address, serviceUuid, characteristicUuid, data) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('read', uuid, serviceUuid, characteristicUuid, data, true);\n};\n\nNobleBindings.prototype.discoverDescriptors = function(peripheralUuid, serviceUuid, characteristicUuid) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.discoverDescriptors(serviceUuid, characteristicUuid);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onDescriptorsDiscovered = function(address, serviceUuid, characteristicUuid, descriptorUuids) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('descriptorsDiscover', uuid, serviceUuid, characteristicUuid, descriptorUuids);\n};\n\nNobleBindings.prototype.readValue = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.readValue(serviceUuid, characteristicUuid, descriptorUuid);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onValueRead = function(address, serviceUuid, characteristicUuid, descriptorUuid, data) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('valueRead', uuid, serviceUuid, characteristicUuid, descriptorUuid, data);\n};\n\nNobleBindings.prototype.writeValue = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.writeValue(serviceUuid, characteristicUuid, descriptorUuid, data);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onValueWrite = function(address, serviceUuid, characteristicUuid, descriptorUuid) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('valueWrite', uuid, serviceUuid, characteristicUuid, descriptorUuid);\n};\n\nNobleBindings.prototype.readHandle = function(peripheralUuid, attHandle) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.readHandle(attHandle);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onHandleRead = function(address, handle, data) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('handleRead', uuid, handle, data);\n};\n\nNobleBindings.prototype.writeHandle = function(peripheralUuid, attHandle, data, withoutResponse) {\n  var handle = this._handles[peripheralUuid];\n  var gatt = this._gatts[handle];\n\n  if (gatt) {\n    gatt.writeHandle(attHandle, data, withoutResponse);\n  } else {\n    console.warn('noble warning: unknown peripheral ' + peripheralUuid);\n  }\n};\n\nNobleBindings.prototype.onHandleWrite = function(address, handle) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('handleWrite', uuid, handle);\n};\n\nNobleBindings.prototype.onHandleNotify = function(address, handle, data) {\n  var uuid = address.split(':').join('').toLowerCase();\n\n  this.emit('handleNotify', uuid, handle, data);\n};\n\nNobleBindings.prototype.onConnectionParameterUpdateRequest = function(handle, minInterval, maxInterval, latency, supervisionTimeout) {\n  this._hci.connUpdateLe(handle, minInterval, maxInterval, latency, supervisionTimeout);\n};\n\nmodule.exports = new NobleBindings();\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/acl-stream.js":"var debug = require('debug')('acl-att-stream');\n\nvar events = require('events');\nvar util = require('util');\n\nvar Smp = require('./smp');\n\nvar AclStream = function(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {\n  this._hci = hci;\n  this._handle = handle;\n\n  this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);\n\n  this.onSmpStkBinded = this.onSmpStk.bind(this);\n  this.onSmpFailBinded = this.onSmpFail.bind(this);\n  this.onSmpEndBinded = this.onSmpEnd.bind(this);\n\n  this._smp.on('stk', this.onSmpStkBinded);\n  this._smp.on('fail', this.onSmpFailBinded);\n  this._smp.on('end', this.onSmpEndBinded);\n};\n\nutil.inherits(AclStream, events.EventEmitter);\n\nAclStream.prototype.encrypt = function() {\n  this._smp.sendPairingRequest();\n};\n\nAclStream.prototype.write = function(cid, data) {\n  this._hci.writeAclDataPkt(this._handle, cid, data);\n};\n\nAclStream.prototype.push = function(cid, data) {\n  if (data) {\n    this.emit('data', cid, data);\n  } else {\n    this.emit('end');\n  }\n};\n\nAclStream.prototype.pushEncrypt = function(encrypt) {\n  this.emit('encrypt', encrypt);\n};\n\nAclStream.prototype.onSmpStk = function(stk) {\n  var random = new Buffer('0000000000000000', 'hex');\n  var diversifier = new Buffer('0000', 'hex');\n\n  this._hci.startLeEncryption(this._handle, random, diversifier, stk);\n};\n\nAclStream.prototype.onSmpFail = function() {\n  this.emit('encryptFail');\n};\n\nAclStream.prototype.onSmpEnd = function() {\n  this._smp.removeListener('stk', this.onSmpStkBinded);\n  this._smp.removeListener('fail', this.onSmpFailBinded);\n  this._smp.removeListener('end', this.onSmpEndBinded);\n};\n\nmodule.exports = AclStream;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/smp.js":"var debug = require('debug')('smp');\n\nvar events = require('events');\nvar util = require('util');\n\nvar crypto = require('./crypto');\n\nvar SMP_CID = 0x0006;\n\nvar SMP_PAIRING_REQUEST = 0x01;\nvar SMP_PAIRING_RESPONSE = 0x02;\nvar SMP_PAIRING_CONFIRM = 0x03;\nvar SMP_PAIRING_RANDOM = 0x04;\nvar SMP_PAIRING_FAILED = 0x05;\nvar SMP_ENCRYPT_INFO = 0x06;\nvar SMP_MASTER_IDENT = 0x07;\n\nvar Smp = function(aclStream, localAddressType, localAddress, remoteAddressType, remoteAddress) {\n  this._aclStream = aclStream;\n\n  this._iat = new Buffer([(localAddressType === 'random') ? 0x01 : 0x00]);\n  this._ia = new Buffer(localAddress.split(':').reverse().join(''), 'hex');\n  this._rat = new Buffer([(remoteAddressType === 'random') ? 0x01 : 0x00]);\n  this._ra = new Buffer(remoteAddress.split(':').reverse().join(''), 'hex');\n\n  this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n  this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n  this._aclStream.on('data', this.onAclStreamDataBinded);\n  this._aclStream.on('end', this.onAclStreamEndBinded);\n};\n\nutil.inherits(Smp, events.EventEmitter);\n\nSmp.prototype.sendPairingRequest = function() {\n  this._preq = new Buffer([\n    SMP_PAIRING_REQUEST,\n    0x03, // IO capability: NoInputNoOutput\n    0x00, // OOB data: Authentication data not present\n    0x01, // Authentication requirement: Bonding - No MITM\n    0x10, // Max encryption key size\n    0x00, // Initiator key distribution: <none>\n    0x01  // Responder key distribution: EncKey\n  ]);\n\n  this.write(this._preq);\n};\n\nSmp.prototype.onAclStreamData = function(cid, data) {\n  if (cid !== SMP_CID) {\n    return;\n  }\n\n  var code = data.readUInt8(0);\n\n  if (SMP_PAIRING_RESPONSE === code) {\n    this.handlePairingResponse(data);\n  } else if (SMP_PAIRING_CONFIRM === code) {\n    this.handlePairingConfirm(data);\n  } else if (SMP_PAIRING_RANDOM === code) {\n    this.handlePairingRandom(data);\n  } else if (SMP_PAIRING_FAILED === code) {\n    this.handlePairingFailed(data);\n  } else if (SMP_ENCRYPT_INFO === code) {\n    this.handleEncryptInfo(data);\n  } else if (SMP_MASTER_IDENT === code) {\n    this.handleMasterIdent(data);\n  }\n};\n\nSmp.prototype.onAclStreamEnd = function() {\n  this._aclStream.removeListener('data', this.onAclStreamDataBinded);\n  this._aclStream.removeListener('end', this.onAclStreamEndBinded);\n\n  this.emit('end');\n};\n\nSmp.prototype.handlePairingResponse = function(data) {\n  this._pres = data;\n\n  this._tk = new Buffer('00000000000000000000000000000000', 'hex');\n  this._r = crypto.r();\n\n  this.write(Buffer.concat([\n    new Buffer([SMP_PAIRING_CONFIRM]),\n    crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra)\n  ]));\n};\n\nSmp.prototype.handlePairingConfirm = function(data) {\n  this._pcnf = data;\n\n  this.write(Buffer.concat([\n    new Buffer([SMP_PAIRING_RANDOM]),\n    this._r\n  ]));\n};\n\nSmp.prototype.handlePairingRandom = function(data) {\n  var r = data.slice(1);\n\n  var pcnf = Buffer.concat([\n    new Buffer([SMP_PAIRING_CONFIRM]),\n    crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra)\n  ]);\n\n  if (this._pcnf.toString('hex') === pcnf.toString('hex')) {\n    var stk = crypto.s1(this._tk, r, this._r);\n\n    this.emit('stk', stk);\n  } else {\n    this.write(new Buffer([\n      SMP_PAIRING_RANDOM,\n      SMP_PAIRING_CONFIRM\n    ]));\n\n    this.emit('fail');\n  }\n};\n\nSmp.prototype.handlePairingFailed = function(data) {\n  this.emit('fail');\n};\n\nSmp.prototype.handleEncryptInfo = function(data) {\n  var ltk = data.slice(1);\n\n  this.emit('ltk', ltk);\n};\n\nSmp.prototype.handleMasterIdent = function(data) {\n  var ediv = data.slice(1, 3);\n  var rand = data.slice(3);\n\n  this.emit('masterIdent', ediv, rand);\n};\n\nSmp.prototype.write = function(data) {\n  this._aclStream.write(SMP_CID, data);\n};\n\nmodule.exports = Smp;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/crypto.js":"var crypto = require('crypto');\n\nfunction r() {\n  return crypto.randomBytes(16);\n}\n\nfunction c1(k, r, pres, preq, iat, ia, rat, ra) {\n  var p1 = Buffer.concat([\n    iat,\n    rat,\n    preq,\n    pres\n  ]);\n\n  var p2 = Buffer.concat([\n    ra,\n    ia,\n    new Buffer('00000000', 'hex')\n  ]);\n\n  var res = xor(r, p1);\n  res = e(k, res);\n  res = xor(res, p2);\n  res = e(k, res);\n\n  return res;\n}\n\nfunction s1(k, r1, r2) {\n  return e(k, Buffer.concat([\n    r2.slice(0, 8),\n    r1.slice(0, 8)\n  ]));\n}\n\nfunction e(key, data) {\n  key = swap(key);\n  data = swap(data);\n\n  var cipher = crypto.createCipheriv('aes-128-ecb', key, '');\n  cipher.setAutoPadding(false);\n\n  return swap(Buffer.concat([\n    cipher.update(data),\n    cipher.final()\n  ]));\n}\n\nfunction xor(b1, b2) {\n  var result = new Buffer(b1.length);\n\n  for (var i = 0; i < b1.length; i++) {\n    result[i] = b1[i] ^ b2[i];\n  }\n\n  return result;\n}\n\nfunction swap(input) {\n  var output = new Buffer(input.length);\n\n  for (var i = 0; i < output.length; i++) {\n    output[i] = input[input.length - i - 1];\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  r: r,\n  c1: c1,\n  s1: s1,\n  e: e\n};\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/gatt.js":"var debug = require('debug')('att');\n\nvar events = require('events');\nvar util = require('util');\n\nvar ATT_OP_ERROR                    = 0x01;\nvar ATT_OP_MTU_REQ                  = 0x02;\nvar ATT_OP_MTU_RESP                 = 0x03;\nvar ATT_OP_FIND_INFO_REQ            = 0x04;\nvar ATT_OP_FIND_INFO_RESP           = 0x05;\nvar ATT_OP_READ_BY_TYPE_REQ         = 0x08;\nvar ATT_OP_READ_BY_TYPE_RESP        = 0x09;\nvar ATT_OP_READ_REQ                 = 0x0a;\nvar ATT_OP_READ_RESP                = 0x0b;\nvar ATT_OP_READ_BLOB_REQ            = 0x0c;\nvar ATT_OP_READ_BLOB_RESP           = 0x0d;\nvar ATT_OP_READ_BY_GROUP_REQ        = 0x10;\nvar ATT_OP_READ_BY_GROUP_RESP       = 0x11;\nvar ATT_OP_WRITE_REQ                = 0x12;\nvar ATT_OP_WRITE_RESP               = 0x13;\nvar ATT_OP_PREPARE_WRITE_REQ        = 0x16;\nvar ATT_OP_PREPARE_WRITE_RESP       = 0x17;\nvar ATT_OP_EXECUTE_WRITE_REQ        = 0x18;\nvar ATT_OP_EXECUTE_WRITE_RESP       = 0x19;\nvar ATT_OP_HANDLE_NOTIFY            = 0x1b;\nvar ATT_OP_HANDLE_IND               = 0x1d;\nvar ATT_OP_HANDLE_CNF               = 0x1e;\nvar ATT_OP_WRITE_CMD                = 0x52;\n\nvar ATT_ECODE_SUCCESS               = 0x00;\nvar ATT_ECODE_INVALID_HANDLE        = 0x01;\nvar ATT_ECODE_READ_NOT_PERM         = 0x02;\nvar ATT_ECODE_WRITE_NOT_PERM        = 0x03;\nvar ATT_ECODE_INVALID_PDU           = 0x04;\nvar ATT_ECODE_AUTHENTICATION        = 0x05;\nvar ATT_ECODE_REQ_NOT_SUPP          = 0x06;\nvar ATT_ECODE_INVALID_OFFSET        = 0x07;\nvar ATT_ECODE_AUTHORIZATION         = 0x08;\nvar ATT_ECODE_PREP_QUEUE_FULL       = 0x09;\nvar ATT_ECODE_ATTR_NOT_FOUND        = 0x0a;\nvar ATT_ECODE_ATTR_NOT_LONG         = 0x0b;\nvar ATT_ECODE_INSUFF_ENCR_KEY_SIZE  = 0x0c;\nvar ATT_ECODE_INVAL_ATTR_VALUE_LEN  = 0x0d;\nvar ATT_ECODE_UNLIKELY              = 0x0e;\nvar ATT_ECODE_INSUFF_ENC            = 0x0f;\nvar ATT_ECODE_UNSUPP_GRP_TYPE       = 0x10;\nvar ATT_ECODE_INSUFF_RESOURCES      = 0x11;\n\nvar GATT_PRIM_SVC_UUID              = 0x2800;\nvar GATT_INCLUDE_UUID               = 0x2802;\nvar GATT_CHARAC_UUID                = 0x2803;\n\nvar GATT_CLIENT_CHARAC_CFG_UUID     = 0x2902;\nvar GATT_SERVER_CHARAC_CFG_UUID     = 0x2903;\n\nvar ATT_CID = 0x0004;\n\nvar Gatt = function(address, aclStream) {\n  this._address = address;\n  this._aclStream = aclStream;\n\n  this._services = {};\n  this._characteristics = {};\n  this._descriptors = {};\n\n  this._currentCommand = null;\n  this._commandQueue = [];\n\n  this._mtu = 23;\n  this._security = 'low';\n\n  this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n  this.onAclStreamEncryptBinded = this.onAclStreamEncrypt.bind(this);\n  this.onAclStreamEncryptFailBinded = this.onAclStreamEncryptFail.bind(this);\n  this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n  this._aclStream.on('data', this.onAclStreamDataBinded);\n  this._aclStream.on('encrypt', this.onAclStreamEncryptBinded);\n  this._aclStream.on('encryptFail', this.onAclStreamEncryptFailBinded);\n  this._aclStream.on('end', this.onAclStreamEndBinded);\n};\n\nutil.inherits(Gatt, events.EventEmitter);\n\nGatt.prototype.onAclStreamData = function(cid, data) {\n  if (cid !== ATT_CID) {\n    return;\n  }\n\n  if (this._currentCommand && data.toString('hex') === this._currentCommand.buffer.toString('hex')) {\n    debug(this._address + ': echo ... echo ... echo ...');\n  } else if (data[0] % 2 === 0) {\n    if (process.env.NOBLE_MULTI_ROLE) {\n      debug(this._address + ': multi-role flag in use, ignoring command meant for peripheral role.');\n    } else {\n      var requestType = data[0];\n      debug(this._address + ': replying with REQ_NOT_SUPP to 0x' + requestType.toString(16));\n      this.writeAtt(this.errorResponse(requestType, 0x0000, ATT_ECODE_REQ_NOT_SUPP));\n    }\n  } else if (data[0] === ATT_OP_HANDLE_NOTIFY || data[0] === ATT_OP_HANDLE_IND) {\n    var valueHandle = data.readUInt16LE(1);\n    var valueData = data.slice(3);\n\n    this.emit('handleNotify', this._address, valueHandle, valueData);\n\n    if (data[0] === ATT_OP_HANDLE_IND) {\n      this._queueCommand(this.handleConfirmation(), null, function() {\n        this.emit('handleConfirmation', this._address, valueHandle);\n      }.bind(this));\n    }\n\n    for (var serviceUuid in this._services) {\n      for (var characteristicUuid in this._characteristics[serviceUuid]) {\n        if (this._characteristics[serviceUuid][characteristicUuid].valueHandle === valueHandle) {\n          this.emit('notification', this._address, serviceUuid, characteristicUuid, valueData);\n        }\n      }\n    }\n  } else if (!this._currentCommand) {\n    debug(this._address + ': uh oh, no current command');\n  } else {\n    if (data[0] === ATT_OP_ERROR &&\n        (data[4] === ATT_ECODE_AUTHENTICATION || data[4] === ATT_ECODE_AUTHORIZATION || data[4] === ATT_ECODE_INSUFF_ENC) &&\n        this._security !== 'medium') {\n\n      this._aclStream.encrypt();\n      return;\n    }\n\n    debug(this._address + ': read: ' + data.toString('hex'));\n\n    this._currentCommand.callback(data);\n\n    this._currentCommand = null;\n\n    while(this._commandQueue.length) {\n      this._currentCommand = this._commandQueue.shift();\n\n      this.writeAtt(this._currentCommand.buffer);\n\n      if (this._currentCommand.callback) {\n        break;\n      } else if (this._currentCommand.writeCallback) {\n        this._currentCommand.writeCallback();\n\n        this._currentCommand = null;\n      }\n    }\n  }\n};\n\nGatt.prototype.onAclStreamEncrypt = function(encrypt) {\n  if (encrypt) {\n    this._security = 'medium';\n\n    this.writeAtt(this._currentCommand.buffer);\n  }\n};\n\nGatt.prototype.onAclStreamEncryptFail = function() {\n\n};\n\nGatt.prototype.onAclStreamEnd = function() {\n  this._aclStream.removeListener('data', this.onAclStreamDataBinded);\n  this._aclStream.removeListener('encrypt', this.onAclStreamEncryptBinded);\n  this._aclStream.removeListener('encryptFail', this.onAclStreamEncryptFailBinded);\n  this._aclStream.removeListener('end', this.onAclStreamEndBinded);\n};\n\nGatt.prototype.writeAtt = function(data) {\n  debug(this._address + ': write: ' + data.toString('hex'));\n\n  this._aclStream.write(ATT_CID, data);\n};\n\nGatt.prototype.errorResponse = function(opcode, handle, status) {\n    var buf = new Buffer(5);\n\n    buf.writeUInt8(ATT_OP_ERROR, 0);\n    buf.writeUInt8(opcode, 1);\n    buf.writeUInt16LE(handle, 2);\n    buf.writeUInt8(status, 4);\n\n    return buf;\n};\n\nGatt.prototype._queueCommand = function(buffer, callback, writeCallback) {\n  this._commandQueue.push({\n    buffer: buffer,\n    callback: callback,\n    writeCallback: writeCallback\n  });\n\n  if (this._currentCommand === null) {\n    while (this._commandQueue.length) {\n      this._currentCommand = this._commandQueue.shift();\n\n      this.writeAtt(this._currentCommand.buffer);\n\n      if (this._currentCommand.callback) {\n        break;\n      } else if (this._currentCommand.writeCallback) {\n        this._currentCommand.writeCallback();\n\n        this._currentCommand = null;\n      }\n    }\n  }\n};\n\nGatt.prototype.mtuRequest = function(mtu) {\n  var buf = new Buffer(3);\n\n  buf.writeUInt8(ATT_OP_MTU_REQ, 0);\n  buf.writeUInt16LE(mtu, 1);\n\n  return buf;\n};\n\nGatt.prototype.readByGroupRequest = function(startHandle, endHandle, groupUuid) {\n  var buf = new Buffer(7);\n\n  buf.writeUInt8(ATT_OP_READ_BY_GROUP_REQ, 0);\n  buf.writeUInt16LE(startHandle, 1);\n  buf.writeUInt16LE(endHandle, 3);\n  buf.writeUInt16LE(groupUuid, 5);\n\n  return buf;\n};\n\nGatt.prototype.readByTypeRequest = function(startHandle, endHandle, groupUuid) {\n  var buf = new Buffer(7);\n\n  buf.writeUInt8(ATT_OP_READ_BY_TYPE_REQ, 0);\n  buf.writeUInt16LE(startHandle, 1);\n  buf.writeUInt16LE(endHandle, 3);\n  buf.writeUInt16LE(groupUuid, 5);\n\n  return buf;\n};\n\nGatt.prototype.readRequest = function(handle) {\n  var buf = new Buffer(3);\n\n  buf.writeUInt8(ATT_OP_READ_REQ, 0);\n  buf.writeUInt16LE(handle, 1);\n\n  return buf;\n};\n\nGatt.prototype.readBlobRequest = function(handle, offset) {\n  var buf = new Buffer(5);\n\n  buf.writeUInt8(ATT_OP_READ_BLOB_REQ, 0);\n  buf.writeUInt16LE(handle, 1);\n  buf.writeUInt16LE(offset, 3);\n\n  return buf;\n};\n\nGatt.prototype.findInfoRequest = function(startHandle, endHandle) {\n  var buf = new Buffer(5);\n\n  buf.writeUInt8(ATT_OP_FIND_INFO_REQ, 0);\n  buf.writeUInt16LE(startHandle, 1);\n  buf.writeUInt16LE(endHandle, 3);\n\n  return buf;\n};\n\nGatt.prototype.writeRequest = function(handle, data, withoutResponse) {\n  var buf = new Buffer(3 + data.length);\n\n  buf.writeUInt8(withoutResponse ? ATT_OP_WRITE_CMD : ATT_OP_WRITE_REQ , 0);\n  buf.writeUInt16LE(handle, 1);\n\n  for (var i = 0; i < data.length; i++) {\n    buf.writeUInt8(data.readUInt8(i), i + 3);\n  }\n\n  return buf;\n};\n\nGatt.prototype.prepareWriteRequest = function(handle, offset, data) {\n  var buf = new Buffer(5 + data.length);\n\n  buf.writeUInt8(ATT_OP_PREPARE_WRITE_REQ);\n  buf.writeUInt16LE(handle, 1);\n  buf.writeUInt16LE(offset, 3);\n\n  for (var i = 0; i < data.length; i++) {\n    buf.writeUInt8(data.readUInt8(i), i + 5);\n  }\n\n  return buf;\n};\n\nGatt.prototype.executeWriteRequest = function(handle, cancelPreparedWrites) {\n  var buf = new Buffer(2);\n\n  buf.writeUInt8(ATT_OP_EXECUTE_WRITE_REQ);\n  buf.writeUInt8(cancelPreparedWrites ? 0 : 1, 1);\n\n  return buf;\n};\n\nGatt.prototype.handleConfirmation = function() {\n  var buf = new Buffer(1);\n\n  buf.writeUInt8(ATT_OP_HANDLE_CNF, 0);\n\n  return buf;\n};\n\nGatt.prototype.exchangeMtu = function(mtu) {\n  this._queueCommand(this.mtuRequest(mtu), function(data) {\n    var opcode = data[0];\n\n    if (opcode === ATT_OP_MTU_RESP) {\n      var newMtu = data.readUInt16LE(1);\n\n      debug(this._address + ': new MTU is ' + newMtu);\n\n      this._mtu = newMtu;\n    }\n\n    this.emit('mtu', this._address, this._mtu);\n  }.bind(this));\n};\n\nGatt.prototype.discoverServices = function(uuids) {\n  var services = [];\n\n  var callback = function(data) {\n    var opcode = data[0];\n    var i = 0;\n\n    if (opcode === ATT_OP_READ_BY_GROUP_RESP) {\n      var type = data[1];\n      var num = (data.length - 2) / type;\n\n      for (i = 0; i < num; i++) {\n        services.push({\n          startHandle: data.readUInt16LE(2 + i * type + 0),\n          endHandle: data.readUInt16LE(2 + i * type + 2),\n          uuid: (type == 6) ? data.readUInt16LE(2 + i * type + 4).toString(16) : data.slice(2 + i * type + 4).slice(0, 16).toString('hex').match(/.{1,2}/g).reverse().join('')\n        });\n      }\n    }\n\n    if (opcode !== ATT_OP_READ_BY_GROUP_RESP || services[services.length - 1].endHandle === 0xffff) {\n      var serviceUuids = [];\n      for (i = 0; i < services.length; i++) {\n        if (uuids.length === 0 || uuids.indexOf(services[i].uuid) !== -1) {\n          serviceUuids.push(services[i].uuid);\n        }\n\n        this._services[services[i].uuid] = services[i];\n      }\n      this.emit('servicesDiscover', this._address, serviceUuids);\n    } else {\n      this._queueCommand(this.readByGroupRequest(services[services.length - 1].endHandle + 1, 0xffff, GATT_PRIM_SVC_UUID), callback);\n    }\n  }.bind(this);\n\n  this._queueCommand(this.readByGroupRequest(0x0001, 0xffff, GATT_PRIM_SVC_UUID), callback);\n};\n\nGatt.prototype.discoverIncludedServices = function(serviceUuid, uuids) {\n  var service = this._services[serviceUuid];\n  var includedServices = [];\n\n  var callback = function(data) {\n    var opcode = data[0];\n    var i = 0;\n\n    if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\n      var type = data[1];\n      var num = (data.length - 2) / type;\n\n      for (i = 0; i < num; i++) {\n        includedServices.push({\n          endHandle: data.readUInt16LE(2 + i * type + 0),\n          startHandle: data.readUInt16LE(2 + i * type + 2),\n          uuid: (type == 8) ? data.readUInt16LE(2 + i * type + 6).toString(16) : data.slice(2 + i * type + 6).slice(0, 16).toString('hex').match(/.{1,2}/g).reverse().join('')\n        });\n      }\n    }\n\n    if (opcode !== ATT_OP_READ_BY_TYPE_RESP || includedServices[includedServices.length - 1].endHandle === service.endHandle) {\n      var includedServiceUuids = [];\n\n      for (i = 0; i < includedServices.length; i++) {\n        if (uuids.length === 0 || uuids.indexOf(includedServices[i].uuid) !== -1) {\n          includedServiceUuids.push(includedServices[i].uuid);\n        }\n      }\n\n      this.emit('includedServicesDiscover', this._address, service.uuid, includedServiceUuids);\n    } else {\n      this._queueCommand(this.readByTypeRequest(includedServices[includedServices.length - 1].endHandle + 1, service.endHandle, GATT_INCLUDE_UUID), callback);\n    }\n  }.bind(this);\n\n  this._queueCommand(this.readByTypeRequest(service.startHandle, service.endHandle, GATT_INCLUDE_UUID), callback);\n};\n\nGatt.prototype.discoverCharacteristics = function(serviceUuid, characteristicUuids) {\n  var service = this._services[serviceUuid];\n  var characteristics = [];\n\n  this._characteristics[serviceUuid] = {};\n  this._descriptors[serviceUuid] = this._descriptors[serviceUuid] || {};\n\n  var callback = function(data) {\n    var opcode = data[0];\n    var i = 0;\n\n    if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\n      var type = data[1];\n      var num = (data.length - 2) / type;\n\n      for (i = 0; i < num; i++) {\n        characteristics.push({\n          startHandle: data.readUInt16LE(2 + i * type + 0),\n          properties: data.readUInt8(2 + i * type + 2),\n          valueHandle: data.readUInt16LE(2 + i * type + 3),\n          uuid: (type == 7) ? data.readUInt16LE(2 + i * type + 5).toString(16) : data.slice(2 + i * type + 5).slice(0, 16).toString('hex').match(/.{1,2}/g).reverse().join('')\n        });\n      }\n    }\n\n    if (opcode !== ATT_OP_READ_BY_TYPE_RESP || characteristics[characteristics.length - 1].valueHandle === service.endHandle) {\n\n      var characteristicsDiscovered = [];\n      for (i = 0; i < characteristics.length; i++) {\n        var properties = characteristics[i].properties;\n\n        var characteristic = {\n          properties: [],\n          uuid: characteristics[i].uuid\n        };\n\n        if (i !== 0) {\n          characteristics[i - 1].endHandle = characteristics[i].startHandle - 1;\n        }\n\n        if (i === (characteristics.length - 1)) {\n          characteristics[i].endHandle = service.endHandle;\n        }\n\n        this._characteristics[serviceUuid][characteristics[i].uuid] = characteristics[i];\n\n        if (properties & 0x01) {\n          characteristic.properties.push('broadcast');\n        }\n\n        if (properties & 0x02) {\n          characteristic.properties.push('read');\n        }\n\n        if (properties & 0x04) {\n          characteristic.properties.push('writeWithoutResponse');\n        }\n\n        if (properties & 0x08) {\n          characteristic.properties.push('write');\n        }\n\n        if (properties & 0x10) {\n          characteristic.properties.push('notify');\n        }\n\n        if (properties & 0x20) {\n          characteristic.properties.push('indicate');\n        }\n\n        if (properties & 0x40) {\n          characteristic.properties.push('authenticatedSignedWrites');\n        }\n\n        if (properties & 0x80) {\n          characteristic.properties.push('extendedProperties');\n        }\n\n        if (characteristicUuids.length === 0 || characteristicUuids.indexOf(characteristic.uuid) !== -1) {\n          characteristicsDiscovered.push(characteristic);\n        }\n      }\n\n      this.emit('characteristicsDiscover', this._address, serviceUuid, characteristicsDiscovered);\n    } else {\n      this._queueCommand(this.readByTypeRequest(characteristics[characteristics.length - 1].valueHandle + 1, service.endHandle, GATT_CHARAC_UUID), callback);\n    }\n  }.bind(this);\n\n  this._queueCommand(this.readByTypeRequest(service.startHandle, service.endHandle, GATT_CHARAC_UUID), callback);\n};\n\nGatt.prototype.read = function(serviceUuid, characteristicUuid) {\n  var characteristic = this._characteristics[serviceUuid][characteristicUuid];\n\n  var readData = new Buffer(0);\n\n  var callback = function(data) {\n    var opcode = data[0];\n\n    if (opcode === ATT_OP_READ_RESP || opcode === ATT_OP_READ_BLOB_RESP) {\n      readData = new Buffer(readData.toString('hex') + data.slice(1).toString('hex'), 'hex');\n\n      if (data.length === this._mtu) {\n        this._queueCommand(this.readBlobRequest(characteristic.valueHandle, readData.length), callback);\n      } else {\n        this.emit('read', this._address, serviceUuid, characteristicUuid, readData);\n      }\n    } else {\n      this.emit('read', this._address, serviceUuid, characteristicUuid, readData);\n    }\n  }.bind(this);\n\n  this._queueCommand(this.readRequest(characteristic.valueHandle), callback);\n};\n\nGatt.prototype.write = function(serviceUuid, characteristicUuid, data, withoutResponse) {\n  var characteristic = this._characteristics[serviceUuid][characteristicUuid];\n\n  if (withoutResponse) {\n    this._queueCommand(this.writeRequest(characteristic.valueHandle, data, true), null, function() {\n      this.emit('write', this._address, serviceUuid, characteristicUuid);\n    }.bind(this));\n  } else if (data.length + 3 > this._mtu) {\n    return this.longWrite(serviceUuid, characteristicUuid, data, withoutResponse);\n  } else {\n    this._queueCommand(this.writeRequest(characteristic.valueHandle, data, false), function(data) {\n      var opcode = data[0];\n\n      if (opcode === ATT_OP_WRITE_RESP) {\n        this.emit('write', this._address, serviceUuid, characteristicUuid);\n      }\n    }.bind(this));\n  }\n};\n\n/* Perform a \"long write\" as described Bluetooth Spec section 4.9.4 \"Write Long Characteristic Values\" */\nGatt.prototype.longWrite = function(serviceUuid, characteristicUuid, data, withoutResponse) {\n  var characteristic = this._characteristics[serviceUuid][characteristicUuid];\n  var limit = this._mtu - 5;\n\n  var prepareWriteCallback = function(data_chunk) {\n    return function(resp) {\n      var opcode = resp[0];\n\n      if (opcode != ATT_OP_PREPARE_WRITE_RESP) {\n        debug(this._address + ': unexpected reply opcode %d (expecting ATT_OP_PREPARE_WRITE_RESP)', opcode);\n      } else {\n        var expected_length = data_chunk.length + 5;\n\n        if (resp.length !== expected_length) {\n          /* the response should contain the data packet echoed back to the caller */\n          debug(this._address + ': unexpected prepareWriteResponse length %d (expecting %d)', resp.length, expected_length);\n        }\n      }\n    }.bind(this);\n  }.bind(this);\n\n  /* split into prepare-write chunks and queue them */\n  var offset = 0;\n\n  while (offset < data.length) {\n    var end = offset+limit;\n    var chunk = data.slice(offset, end);\n    this._queueCommand(this.prepareWriteRequest(characteristic.valueHandle, offset, chunk), prepareWriteCallback(chunk));\n    offset = end;\n  }\n\n  /* queue the execute command with a callback to emit the write signal when done */\n  this._queueCommand(this.executeWriteRequest(characteristic.valueHandle), function(resp) {\n    var opcode = resp[0];\n\n    if (opcode === ATT_OP_EXECUTE_WRITE_RESP && !withoutResponse) {\n      this.emit('write', this._address, serviceUuid, characteristicUuid);\n    }\n  }.bind(this));\n};\n\nGatt.prototype.broadcast = function(serviceUuid, characteristicUuid, broadcast) {\n  var characteristic = this._characteristics[serviceUuid][characteristicUuid];\n\n  this._queueCommand(this.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT_SERVER_CHARAC_CFG_UUID), function(data) {\n    var opcode = data[0];\n    if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\n      var type = data[1];\n      var handle = data.readUInt16LE(2);\n      var value = data.readUInt16LE(4);\n\n      if (broadcast) {\n        value |= 0x0001;\n      } else {\n        value &= 0xfffe;\n      }\n\n      var valueBuffer = new Buffer(2);\n      valueBuffer.writeUInt16LE(value, 0);\n\n      this._queueCommand(this.writeRequest(handle, valueBuffer, false), function(data) {\n        var opcode = data[0];\n\n        if (opcode === ATT_OP_WRITE_RESP) {\n          this.emit('broadcast', this._address, serviceUuid, characteristicUuid, broadcast);\n        }\n      }.bind(this));\n    }\n  }.bind(this));\n};\n\nGatt.prototype.notify = function(serviceUuid, characteristicUuid, notify) {\n  var characteristic = this._characteristics[serviceUuid][characteristicUuid];\n\n  this._queueCommand(this.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT_CLIENT_CHARAC_CFG_UUID), function(data) {\n    var opcode = data[0];\n    if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\n      var type = data[1];\n      var handle = data.readUInt16LE(2);\n      var value = data.readUInt16LE(4);\n\n      var useNotify = characteristic.properties & 0x10;\n      var useIndicate = characteristic.properties & 0x20;\n\n      if (notify) {\n        if (useNotify) {\n          value |= 0x0001;\n        } else if (useIndicate) {\n          value |= 0x0002;\n        }\n      } else {\n        if (useNotify) {\n          value &= 0xfffe;\n        } else if (useIndicate) {\n          value &= 0xfffd;\n        }\n      }\n\n      var valueBuffer = new Buffer(2);\n      valueBuffer.writeUInt16LE(value, 0);\n\n      this._queueCommand(this.writeRequest(handle, valueBuffer, false), function(data) {\n        var opcode = data[0];\n\n        if (opcode === ATT_OP_WRITE_RESP) {\n          this.emit('notify', this._address, serviceUuid, characteristicUuid, notify);\n        }\n      }.bind(this));\n    }\n  }.bind(this));\n};\n\nGatt.prototype.discoverDescriptors = function(serviceUuid, characteristicUuid) {\n  var characteristic = this._characteristics[serviceUuid][characteristicUuid];\n  var descriptors = [];\n\n  this._descriptors[serviceUuid][characteristicUuid] = {};\n\n  var callback = function(data) {\n    var opcode = data[0];\n    var i = 0;\n\n    if (opcode === ATT_OP_FIND_INFO_RESP) {\n      var num = data[1];\n\n      for (i = 0; i < num; i++) {\n        descriptors.push({\n          handle: data.readUInt16LE(2 + i * 4 + 0),\n          uuid: data.readUInt16LE(2 + i * 4 + 2).toString(16)\n        });\n      }\n    }\n\n    if (opcode !== ATT_OP_FIND_INFO_RESP || descriptors[descriptors.length - 1].handle === characteristic.endHandle) {\n      var descriptorUuids = [];\n      for (i = 0; i < descriptors.length; i++) {\n        descriptorUuids.push(descriptors[i].uuid);\n\n        this._descriptors[serviceUuid][characteristicUuid][descriptors[i].uuid] = descriptors[i];\n      }\n\n      this.emit('descriptorsDiscover', this._address, serviceUuid, characteristicUuid, descriptorUuids);\n    } else {\n      this._queueCommand(this.findInfoRequest(descriptors[descriptors.length - 1].handle + 1, characteristic.endHandle), callback);\n    }\n  }.bind(this);\n\n  this._queueCommand(this.findInfoRequest(characteristic.valueHandle + 1, characteristic.endHandle), callback);\n};\n\nGatt.prototype.readValue = function(serviceUuid, characteristicUuid, descriptorUuid) {\n  var descriptor = this._descriptors[serviceUuid][characteristicUuid][descriptorUuid];\n\n  this._queueCommand(this.readRequest(descriptor.handle), function(data) {\n    var opcode = data[0];\n\n    if (opcode === ATT_OP_READ_RESP) {\n      this.emit('valueRead', this._address, serviceUuid, characteristicUuid, descriptorUuid, data.slice(1));\n    }\n  }.bind(this));\n};\n\nGatt.prototype.writeValue = function(serviceUuid, characteristicUuid, descriptorUuid, data) {\n  var descriptor = this._descriptors[serviceUuid][characteristicUuid][descriptorUuid];\n\n  this._queueCommand(this.writeRequest(descriptor.handle, data, false), function(data) {\n    var opcode = data[0];\n\n    if (opcode === ATT_OP_WRITE_RESP) {\n      this.emit('valueWrite', this._address, serviceUuid, characteristicUuid, descriptorUuid);\n    }\n  }.bind(this));\n};\n\nGatt.prototype.readHandle = function(handle) {\n  this._queueCommand(this.readRequest(handle), function(data) {\n    var opcode = data[0];\n\n    if (opcode === ATT_OP_READ_RESP) {\n      this.emit('handleRead', this._address, handle, data.slice(1));\n    }\n  }.bind(this));\n};\n\nGatt.prototype.writeHandle = function(handle, data, withoutResponse) {\n  if (withoutResponse) {\n    this._queueCommand(this.writeRequest(handle, data, true), null, function() {\n      this.emit('handleWrite', this._address, handle);\n    }.bind(this));\n  } else {\n    this._queueCommand(this.writeRequest(handle, data, false), function(data) {\n      var opcode = data[0];\n\n      if (opcode === ATT_OP_WRITE_RESP) {\n        this.emit('handleWrite', this._address, handle);\n      }\n    }.bind(this));\n  }\n};\n\nmodule.exports = Gatt;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/gap.js":"var debug = require('debug')('gap');\n\nvar events = require('events');\nvar os = require('os');\nvar util = require('util');\n\nvar isChip = (os.platform() === 'linux') && (os.release().indexOf('-ntc') !== -1);\n\nvar Gap = function(hci) {\n  this._hci = hci;\n\n  this._scanState = null;\n  this._scanFilterDuplicates = null;\n  this._discoveries = {};\n\n  this._hci.on('error', this.onHciError.bind(this));\n  this._hci.on('leScanParametersSet', this.onHciLeScanParametersSet.bind(this));\n  this._hci.on('leScanEnableSet', this.onHciLeScanEnableSet.bind(this));\n  this._hci.on('leAdvertisingReport', this.onHciLeAdvertisingReport.bind(this));\n\n  this._hci.on('leScanEnableSetCmd', this.onLeScanEnableSetCmd.bind(this));\n};\n\nutil.inherits(Gap, events.EventEmitter);\n\nGap.prototype.startScanning = function(allowDuplicates) {\n  this._scanState = 'starting';\n  this._scanFilterDuplicates = !allowDuplicates;\n\n  // Always set scan parameters before scanning\n  // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737\n  // p106 - p107\n  this._hci.setScanEnabled(false, true);\n  this._hci.setScanParameters();\n\n  if (isChip) {\n    // work around for Next Thing Co. C.H.I.P, always allow duplicates, to get scan response\n    this._scanFilterDuplicates = false;\n  }\n\n  this._hci.setScanEnabled(true, this._scanFilterDuplicates);\n};\n\nGap.prototype.stopScanning = function() {\n  this._scanState = 'stopping';\n\n  this._hci.setScanEnabled(false, true);\n};\n\nGap.prototype.onHciError = function(error) {\n\n};\n\nGap.prototype.onHciLeScanParametersSet = function() {\n\n};\n\n// Called when receive an event \"Command Complete\" for \"LE Set Scan Enable\"\nGap.prototype.onHciLeScanEnableSet = function(status) {\n  // Check the status we got from the command complete function.\n  if (status !== 0) {\n    // If it is non-zero there was an error, and we should not change\n    // our status as a result.\n    return;\n  }\n\n  if (this._scanState === 'starting') {\n    this._scanState = 'started';\n\n    this.emit('scanStart', this._scanFilterDuplicates);\n  } else if (this._scanState === 'stopping') {\n    this._scanState = 'stopped';\n\n    this.emit('scanStop');\n  }\n};\n\n// Called when we see the actual command \"LE Set Scan Enable\"\nGap.prototype.onLeScanEnableSetCmd = function(enable, filterDuplicates) {\n  // Check to see if the new settings differ from what we expect.\n  // If we are scanning, then a change happens if the new command stops\n  // scanning or if duplicate filtering changes.\n  // If we are not scanning, then a change happens if scanning was enabled.\n  if ((this._scanState == 'starting' || this._scanState == 'started')) {\n    if (!enable) {\n      this.emit('scanStop');\n    } else if (this._scanFilterDuplicates !== filterDuplicates) {\n      this._scanFilterDuplicates = filterDuplicates;\n\n      this.emit('scanStart', this._scanFilterDuplicates);\n    }\n  } else if ((this._scanState == 'stopping' || this._scanState == 'stopped') && enable) {\n    // Someone started scanning on us.\n    this.emit('scanStart', this._scanFilterDuplicates);\n  }\n};\n\nGap.prototype.onHciLeAdvertisingReport = function(status, type, address, addressType, eir, rssi) {\n  var previouslyDiscovered = !!this._discoveries[address];\n  var advertisement =  previouslyDiscovered ? this._discoveries[address].advertisement : {\n    localName: undefined,\n    txPowerLevel: undefined,\n    manufacturerData: undefined,\n    serviceData: [],\n    serviceUuids: [],\n    solicitationServiceUuids: []\n  };\n\n  var discoveryCount = previouslyDiscovered ? this._discoveries[address].count : 0;\n  var hasScanResponse = previouslyDiscovered ? this._discoveries[address].hasScanResponse : false;\n\n  if (type === 0x04) {\n    hasScanResponse = true;\n  } else {\n    // reset service data every non-scan response event\n    advertisement.serviceData = [];\n    advertisement.serviceUuids = [];\n    advertisement.serviceSolicitationUuids = [];\n  }\n\n  discoveryCount++;\n\n  var i = 0;\n  var j = 0;\n  var serviceUuid = null;\n  var serviceSolicitationUuid = null;\n\n  while ((i + 1) < eir.length) {\n    var length = eir.readUInt8(i);\n\n    if (length < 1) {\n      debug('invalid EIR data, length = ' + length);\n      break;\n    }\n\n    var eirType = eir.readUInt8(i + 1); // https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile\n\n    if ((i + length + 1) > eir.length) {\n      debug('invalid EIR data, out of range of buffer length');\n      break;\n    }\n\n    var bytes = eir.slice(i + 2).slice(0, length - 1);\n\n    switch(eirType) {\n      case 0x02: // Incomplete List of 16-bit Service Class UUID\n      case 0x03: // Complete List of 16-bit Service Class UUIDs\n        for (j = 0; j < bytes.length; j += 2) {\n          serviceUuid = bytes.readUInt16LE(j).toString(16);\n          if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\n            advertisement.serviceUuids.push(serviceUuid);\n          }\n        }\n        break;\n\n      case 0x06: // Incomplete List of 128-bit Service Class UUIDs\n      case 0x07: // Complete List of 128-bit Service Class UUIDs\n        for (j = 0; j < bytes.length; j += 16) {\n          serviceUuid = bytes.slice(j, j + 16).toString('hex').match(/.{1,2}/g).reverse().join('');\n          if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\n            advertisement.serviceUuids.push(serviceUuid);\n          }\n        }\n        break;\n\n      case 0x08: // Shortened Local Name\n      case 0x09: // Complete Local Name»\n        advertisement.localName = bytes.toString('utf8');\n        break;\n\n      case 0x0a: // Tx Power Level\n        advertisement.txPowerLevel = bytes.readInt8(0);\n        break;\n\n      case  0x14: // List of 16 bit solicitation UUIDs\n        for (j = 0; j < bytes.length; j += 2) {\n          serviceSolicitationUuid = bytes.readUInt16LE(j).toString(16);\n          if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {\n            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);\n          }\n        }\n        break;\n\n      case  0x15: // List of 128 bit solicitation UUIDs\n        for (j = 0; j < bytes.length; j += 16) {\n          serviceSolicitationUuid = bytes.slice(j, j + 16).toString('hex').match(/.{1,2}/g).reverse().join('');\n          if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {\n            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);\n          }\n        }\n        break;\n\n      case 0x16: // Service Data, there can be multiple occurences\n        var serviceDataUuid = bytes.slice(0, 2).toString('hex').match(/.{1,2}/g).reverse().join('');\n        var serviceData = bytes.slice(2, bytes.length);\n\n        advertisement.serviceData.push({\n          uuid: serviceDataUuid,\n          data: serviceData\n        });\n        break;\n\n      case  0x1f: // List of 32 bit solicitation UUIDs\n        for (j = 0; j < bytes.length; j += 4) {\n          serviceSolicitationUuid = bytes.readUInt32LE(j).toString(16);\n          if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {\n            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);\n          }\n        }\n        break;\n\n      case 0xff: // Manufacturer Specific Data\n        advertisement.manufacturerData = bytes;\n        break;\n    }\n\n    i += (length + 1);\n  }\n\n  debug('advertisement = ' + JSON.stringify(advertisement, null, 0));\n\n  var connectable = (type === 0x04 && previouslyDiscovered) ? this._discoveries[address].connectable : (type !== 0x03);\n\n  this._discoveries[address] = {\n    address: address,\n    addressType: addressType,\n    connectable: connectable,\n    advertisement: advertisement,\n    rssi: rssi,\n    count: discoveryCount,\n    hasScanResponse: hasScanResponse\n  };\n\n  // only report after a scan response event or if non-connectable or more than one discovery without a scan response, so more data can be collected\n  if (type === 0x04 || !connectable || (discoveryCount > 1 && !hasScanResponse) || process.env.NOBLE_REPORT_ALL_HCI_EVENTS) {\n    this.emit('discover', status, address, addressType, connectable, advertisement, rssi);\n  }\n};\n\nmodule.exports = Gap;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/hci.js":"var debug = require('debug')('hci');\n\nvar events = require('events');\nvar util = require('util');\n\nvar BluetoothHciSocket = require('bluetooth-hci-socket');\n\nvar HCI_COMMAND_PKT = 0x01;\nvar HCI_ACLDATA_PKT = 0x02;\nvar HCI_EVENT_PKT = 0x04;\n\nvar ACL_START_NO_FLUSH = 0x00;\nvar ACL_CONT  = 0x01;\nvar ACL_START = 0x02;\n\nvar EVT_DISCONN_COMPLETE = 0x05;\nvar EVT_ENCRYPT_CHANGE = 0x08;\nvar EVT_CMD_COMPLETE = 0x0e;\nvar EVT_CMD_STATUS = 0x0f;\nvar EVT_LE_META_EVENT = 0x3e;\n\nvar EVT_LE_CONN_COMPLETE = 0x01;\nvar EVT_LE_ADVERTISING_REPORT = 0x02;\nvar EVT_LE_CONN_UPDATE_COMPLETE = 0x03;\n\nvar OGF_LINK_CTL = 0x01;\nvar OCF_DISCONNECT = 0x0006;\n\nvar OGF_HOST_CTL = 0x03;\nvar OCF_SET_EVENT_MASK = 0x0001;\nvar OCF_RESET = 0x0003;\nvar OCF_READ_LE_HOST_SUPPORTED = 0x006C;\nvar OCF_WRITE_LE_HOST_SUPPORTED = 0x006D;\n\n\nvar OGF_INFO_PARAM = 0x04;\nvar OCF_READ_LOCAL_VERSION = 0x0001;\nvar OCF_READ_BD_ADDR = 0x0009;\n\nvar OGF_STATUS_PARAM = 0x05;\nvar OCF_READ_RSSI = 0x0005;\n\nvar OGF_LE_CTL = 0x08;\nvar OCF_LE_SET_EVENT_MASK = 0x0001;\nvar OCF_LE_SET_SCAN_PARAMETERS = 0x000b;\nvar OCF_LE_SET_SCAN_ENABLE = 0x000c;\nvar OCF_LE_CREATE_CONN = 0x000d;\nvar OCF_LE_CONN_UPDATE = 0x0013;\nvar OCF_LE_START_ENCRYPTION = 0x0019;\n\nvar DISCONNECT_CMD = OCF_DISCONNECT | OGF_LINK_CTL << 10;\n\nvar SET_EVENT_MASK_CMD = OCF_SET_EVENT_MASK | OGF_HOST_CTL << 10;\nvar RESET_CMD = OCF_RESET | OGF_HOST_CTL << 10;\nvar READ_LE_HOST_SUPPORTED_CMD = OCF_READ_LE_HOST_SUPPORTED | OGF_HOST_CTL << 10;\nvar WRITE_LE_HOST_SUPPORTED_CMD = OCF_WRITE_LE_HOST_SUPPORTED | OGF_HOST_CTL << 10;\n\nvar READ_LOCAL_VERSION_CMD = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);\nvar READ_BD_ADDR_CMD = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);\n\nvar READ_RSSI_CMD = OCF_READ_RSSI | OGF_STATUS_PARAM << 10;\n\nvar LE_SET_EVENT_MASK_CMD = OCF_LE_SET_EVENT_MASK | OGF_LE_CTL << 10;\nvar LE_SET_SCAN_PARAMETERS_CMD = OCF_LE_SET_SCAN_PARAMETERS | OGF_LE_CTL << 10;\nvar LE_SET_SCAN_ENABLE_CMD = OCF_LE_SET_SCAN_ENABLE | OGF_LE_CTL << 10;\nvar LE_CREATE_CONN_CMD = OCF_LE_CREATE_CONN | OGF_LE_CTL << 10;\nvar LE_CONN_UPDATE_CMD = OCF_LE_CONN_UPDATE | OGF_LE_CTL << 10;\nvar LE_START_ENCRYPTION_CMD = OCF_LE_START_ENCRYPTION | OGF_LE_CTL << 10;\n\nvar HCI_OE_USER_ENDED_CONNECTION = 0x13;\n\nvar STATUS_MAPPER = require('./hci-status');\n\nvar Hci = function() {\n  this._socket = new BluetoothHciSocket();\n  this._isDevUp = null;\n  this._state = null;\n  this._deviceId = null;\n\n  this._handleBuffers = {};\n\n  this.on('stateChange', this.onStateChange.bind(this));\n};\n\nutil.inherits(Hci, events.EventEmitter);\n\nHci.STATUS_MAPPER = STATUS_MAPPER;\n\nHci.prototype.init = function() {\n  this._socket.on('data', this.onSocketData.bind(this));\n  this._socket.on('error', this.onSocketError.bind(this));\n\n  var deviceId = process.env.NOBLE_HCI_DEVICE_ID ? parseInt(process.env.NOBLE_HCI_DEVICE_ID, 10) : undefined;\n\n  if (process.env.HCI_CHANNEL_USER) {\n    this._deviceId = this._socket.bindUser(deviceId);\n    this._socket.start();\n\n    this.reset();\n  } else {\n    this._deviceId = this._socket.bindRaw(deviceId);\n    this._socket.start();\n\n    this.pollIsDevUp();\n  }\n};\n\nHci.prototype.pollIsDevUp = function() {\n  var isDevUp = this._socket.isDevUp();\n\n  if (this._isDevUp !== isDevUp) {\n    if (isDevUp) {\n      this.setSocketFilter();\n      this.setEventMask();\n      this.setLeEventMask();\n      this.readLocalVersion();\n      this.writeLeHostSupported();\n      this.readLeHostSupported();\n      this.readBdAddr();\n    } else {\n      this.emit('stateChange', 'poweredOff');\n    }\n\n    this._isDevUp = isDevUp;\n  }\n\n  setTimeout(this.pollIsDevUp.bind(this), 1000);\n};\n\nHci.prototype.setSocketFilter = function() {\n  var filter = new Buffer(14);\n  var typeMask = (1 << HCI_COMMAND_PKT) | (1 << HCI_EVENT_PKT) | (1 << HCI_ACLDATA_PKT);\n  var eventMask1 = (1 << EVT_DISCONN_COMPLETE) | (1 << EVT_ENCRYPT_CHANGE) | (1 << EVT_CMD_COMPLETE) | (1 << EVT_CMD_STATUS);\n  var eventMask2 = (1 << (EVT_LE_META_EVENT - 32));\n  var opcode = 0;\n\n  filter.writeUInt32LE(typeMask, 0);\n  filter.writeUInt32LE(eventMask1, 4);\n  filter.writeUInt32LE(eventMask2, 8);\n  filter.writeUInt16LE(opcode, 12);\n\n  debug('setting filter to: ' + filter.toString('hex'));\n  this._socket.setFilter(filter);\n};\n\nHci.prototype.setEventMask = function() {\n  var cmd = new Buffer(12);\n  var eventMask = new Buffer('fffffbff07f8bf3d', 'hex');\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(SET_EVENT_MASK_CMD, 1);\n\n  // length\n  cmd.writeUInt8(eventMask.length, 3);\n\n  eventMask.copy(cmd, 4);\n\n  debug('set event mask - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.reset = function() {\n    var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(OCF_RESET | OGF_HOST_CTL << 10, 1);\n\n  // length\n  cmd.writeUInt8(0x00, 3);\n\n  debug('reset - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\n\nHci.prototype.readLocalVersion = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_LOCAL_VERSION_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x0, 3);\n\n  debug('read local version - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readBdAddr = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_BD_ADDR_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x0, 3);\n\n  debug('read bd addr - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setLeEventMask = function() {\n  var cmd = new Buffer(12);\n  var leEventMask = new Buffer('1f00000000000000', 'hex');\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_EVENT_MASK_CMD, 1);\n\n  // length\n  cmd.writeUInt8(leEventMask.length, 3);\n\n  leEventMask.copy(cmd, 4);\n\n  debug('set le event mask - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readLeHostSupported = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_LE_HOST_SUPPORTED_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x00, 3);\n\n  debug('read LE host supported - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.writeLeHostSupported = function() {\n  var cmd = new Buffer(6);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(WRITE_LE_HOST_SUPPORTED_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x02, 3);\n\n  // data\n  cmd.writeUInt8(0x01, 4); // le\n  cmd.writeUInt8(0x00, 5); // simul\n\n  debug('write LE host supported - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setScanParameters = function() {\n  var cmd = new Buffer(11);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_SCAN_PARAMETERS_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x07, 3);\n\n  // data\n  cmd.writeUInt8(0x01, 4); // type: 0 -> passive, 1 -> active\n  cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6\n  cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6\n  cmd.writeUInt8(0x00, 9); // own address type: 0 -> public, 1 -> random\n  cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types\n\n  debug('set scan parameters - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setScanEnabled = function(enabled, filterDuplicates) {\n  var cmd = new Buffer(6);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_SCAN_ENABLE_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x02, 3);\n\n  // data\n  cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n  cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // duplicates: 0 -> duplicates, 0 -> duplicates\n\n  debug('set scan enabled - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.createLeConn = function(address, addressType) {\n  var cmd = new Buffer(29);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_CREATE_CONN_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x19, 3);\n\n  // data\n  cmd.writeUInt16LE(0x0060, 4); // interval\n  cmd.writeUInt16LE(0x0030, 6); // window\n  cmd.writeUInt8(0x00, 8); // initiator filter\n\n  cmd.writeUInt8(addressType === 'random' ? 0x01 : 0x00, 9); // peer address type\n  (new Buffer(address.split(':').reverse().join(''), 'hex')).copy(cmd, 10); // peer address\n\n  cmd.writeUInt8(0x00, 16); // own address type\n\n  cmd.writeUInt16LE(0x0006, 17); // min interval\n  cmd.writeUInt16LE(0x000c, 19); // max interval\n  cmd.writeUInt16LE(0x0000, 21); // latency\n  cmd.writeUInt16LE(0x00c8, 23); // supervision timeout\n  cmd.writeUInt16LE(0x0004, 25); // min ce length\n  cmd.writeUInt16LE(0x0006, 27); // max ce length\n\n  debug('create le conn - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.connUpdateLe = function(handle, minInterval, maxInterval, latency, supervisionTimeout) {\n  var cmd = new Buffer(18);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_CONN_UPDATE_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x0e, 3);\n\n  // data\n  cmd.writeUInt16LE(handle, 4);\n  cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval\n  cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval\n  cmd.writeUInt16LE(latency, 10); // latency\n  cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout\n  cmd.writeUInt16LE(0x0000, 14); // min ce length\n  cmd.writeUInt16LE(0x0000, 16); // max ce length\n\n  debug('conn update le - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.startLeEncryption = function(handle, random, diversifier, key) {\n  var cmd = new Buffer(32);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_START_ENCRYPTION_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x1c, 3);\n\n  // data\n  cmd.writeUInt16LE(handle, 4); // handle\n  random.copy(cmd, 6);\n  diversifier.copy(cmd, 14);\n  key.copy(cmd, 16);\n\n  debug('start le encryption - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.disconnect = function(handle, reason) {\n  var cmd = new Buffer(7);\n\n  reason = reason || HCI_OE_USER_ENDED_CONNECTION;\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(DISCONNECT_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x03, 3);\n\n  // data\n  cmd.writeUInt16LE(handle, 4); // handle\n  cmd.writeUInt8(reason, 6); // reason\n\n  debug('disconnect - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readRssi = function(handle) {\n  var cmd = new Buffer(6);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_RSSI_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x02, 3);\n\n  // data\n  cmd.writeUInt16LE(handle, 4); // handle\n\n  debug('read rssi - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.writeAclDataPkt = function(handle, cid, data) {\n  var pkt = new Buffer(9 + data.length);\n\n  // header\n  pkt.writeUInt8(HCI_ACLDATA_PKT, 0);\n  pkt.writeUInt16LE(handle | ACL_START_NO_FLUSH << 12, 1);\n  pkt.writeUInt16LE(data.length + 4, 3); // data length 1\n  pkt.writeUInt16LE(data.length, 5); // data length 2\n  pkt.writeUInt16LE(cid, 7);\n\n  data.copy(pkt, 9);\n\n  debug('write acl data pkt - writing: ' + pkt.toString('hex'));\n  this._socket.write(pkt);\n};\n\nHci.prototype.onSocketData = function(data) {\n  debug('onSocketData: ' + data.toString('hex'));\n\n  var eventType = data.readUInt8(0);\n  var handle;\n  var cmd;\n  var status;\n\n  debug('\\tevent type = ' + eventType);\n\n  if (HCI_EVENT_PKT === eventType) {\n    var subEventType = data.readUInt8(1);\n\n    debug('\\tsub event type = ' + subEventType);\n\n    if (subEventType === EVT_DISCONN_COMPLETE) {\n      handle =  data.readUInt16LE(4);\n      var reason = data.readUInt8(6);\n\n      debug('\\t\\thandle = ' + handle);\n      debug('\\t\\treason = ' + reason);\n\n      this.emit('disconnComplete', handle, reason);\n    } else if (subEventType === EVT_ENCRYPT_CHANGE) {\n      handle =  data.readUInt16LE(4);\n      var encrypt = data.readUInt8(6);\n\n      debug('\\t\\thandle = ' + handle);\n      debug('\\t\\tencrypt = ' + encrypt);\n\n      this.emit('encryptChange', handle, encrypt);\n    } else if (subEventType === EVT_CMD_COMPLETE) {\n      cmd = data.readUInt16LE(4);\n      status = data.readUInt8(6);\n      var result = data.slice(7);\n\n      debug('\\t\\tcmd = ' + cmd);\n      debug('\\t\\tstatus = ' + status);\n      debug('\\t\\tresult = ' + result.toString('hex'));\n\n      this.processCmdCompleteEvent(cmd, status, result);\n    } else if (subEventType === EVT_CMD_STATUS) {\n      status = data.readUInt8(3);\n      cmd = data.readUInt16LE(5);\n\n      debug('\\t\\tstatus = ' + status);\n      debug('\\t\\tcmd = ' + cmd);\n\n      this.processCmdStatusEvent(cmd, status);\n    } else if (subEventType === EVT_LE_META_EVENT) {\n      var leMetaEventType = data.readUInt8(3);\n      var leMetaEventStatus = data.readUInt8(4);\n      var leMetaEventData = data.slice(5);\n\n      debug('\\t\\tLE meta event type = ' + leMetaEventType);\n      debug('\\t\\tLE meta event status = ' + leMetaEventStatus);\n      debug('\\t\\tLE meta event data = ' + leMetaEventData.toString('hex'));\n\n      this.processLeMetaEvent(leMetaEventType, leMetaEventStatus, leMetaEventData);\n    }\n  } else if (HCI_ACLDATA_PKT === eventType) {\n    var flags = data.readUInt16LE(1) >> 12;\n    handle = data.readUInt16LE(1) & 0x0fff;\n\n    if (ACL_START === flags) {\n      var cid = data.readUInt16LE(7);\n\n      var length = data.readUInt16LE(5);\n      var pktData = data.slice(9);\n\n      debug('\\t\\tcid = ' + cid);\n\n      if (length === pktData.length) {\n        debug('\\t\\thandle = ' + handle);\n        debug('\\t\\tdata = ' + pktData.toString('hex'));\n\n        this.emit('aclDataPkt', handle, cid, pktData);\n      } else {\n        this._handleBuffers[handle] = {\n          length: length,\n          cid: cid,\n          data: pktData\n        };\n      }\n    } else if (ACL_CONT === flags) {\n      if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {\n        return;\n      }\n\n      this._handleBuffers[handle].data = Buffer.concat([\n        this._handleBuffers[handle].data,\n        data.slice(5)\n      ]);\n\n      if (this._handleBuffers[handle].data.length === this._handleBuffers[handle].length) {\n        this.emit('aclDataPkt', handle, this._handleBuffers[handle].cid, this._handleBuffers[handle].data);\n\n        delete this._handleBuffers[handle];\n      }\n    }\n  } else if (HCI_COMMAND_PKT === eventType) {\n    cmd = data.readUInt16LE(1);\n    var len = data.readUInt8(3);\n\n    debug('\\t\\tcmd = ' + cmd);\n    debug('\\t\\tdata len = ' + len);\n\n    if (cmd === LE_SET_SCAN_ENABLE_CMD) {\n      var enable = (data.readUInt8(4) === 0x1);\n      var filterDuplicates = (data.readUInt8(5) === 0x1);\n\n      debug('\\t\\t\\tLE enable scan command');\n      debug('\\t\\t\\tenable scanning = ' + enable);\n      debug('\\t\\t\\tfilter duplicates = ' + filterDuplicates);\n\n      this.emit('leScanEnableSetCmd', enable, filterDuplicates);\n    }\n  }\n};\n\nHci.prototype.onSocketError = function(error) {\n  debug('onSocketError: ' + error.message);\n\n  if (error.message === 'Operation not permitted') {\n    this.emit('stateChange', 'unauthorized');\n  } else if (error.message === 'Network is down') {\n    // no-op\n  }\n};\n\nHci.prototype.processCmdCompleteEvent = function(cmd, status, result) {\n  if (cmd === RESET_CMD) {\n    this.setEventMask();\n    this.setLeEventMask();\n    this.readLocalVersion();\n    this.readBdAddr();\n  } else if (cmd === READ_LE_HOST_SUPPORTED_CMD) {\n    if (status === 0) {\n      var le = result.readUInt8(0);\n      var simul = result.readUInt8(1);\n\n      debug('\\t\\t\\tle = ' + le);\n      debug('\\t\\t\\tsimul = ' + simul);\n    }\n  } else if (cmd === READ_LOCAL_VERSION_CMD) {\n    var hciVer = result.readUInt8(0);\n    var hciRev = result.readUInt16LE(1);\n    var lmpVer = result.readInt8(3);\n    var manufacturer = result.readUInt16LE(4);\n    var lmpSubVer = result.readUInt16LE(6);\n\n    if (hciVer < 0x06) {\n      this.emit('stateChange', 'unsupported');\n    } else if (this._state !== 'poweredOn') {\n      this.setScanEnabled(false, true);\n      this.setScanParameters();\n    }\n\n    this.emit('readLocalVersion', hciVer, hciRev, lmpVer, manufacturer, lmpSubVer);\n  } else if (cmd === READ_BD_ADDR_CMD) {\n    this.addressType = 'public';\n    this.address = result.toString('hex').match(/.{1,2}/g).reverse().join(':');\n\n    debug('address = ' + this.address);\n\n    this.emit('addressChange', this.address);\n  } else if (cmd === LE_SET_SCAN_PARAMETERS_CMD) {\n    this.emit('stateChange', 'poweredOn');\n\n    this.emit('leScanParametersSet');\n  } else if (cmd === LE_SET_SCAN_ENABLE_CMD) {\n    this.emit('leScanEnableSet', status);\n  } else if (cmd === READ_RSSI_CMD) {\n    var handle = result.readUInt16LE(0);\n    var rssi = result.readInt8(2);\n\n    debug('\\t\\t\\thandle = ' + handle);\n    debug('\\t\\t\\trssi = ' + rssi);\n\n    this.emit('rssiRead', handle, rssi);\n  }\n};\n\nHci.prototype.processLeMetaEvent = function(eventType, status, data) {\n  if (eventType === EVT_LE_CONN_COMPLETE) {\n    this.processLeConnComplete(status, data);\n  } else if (eventType === EVT_LE_ADVERTISING_REPORT) {\n    this.processLeAdvertisingReport(status, data);\n  } else if (eventType === EVT_LE_CONN_UPDATE_COMPLETE) {\n    this.processLeConnUpdateComplete(status, data);\n  }\n};\n\nHci.prototype.processLeConnComplete = function(status, data) {\n  var handle = data.readUInt16LE(0);\n  var role = data.readUInt8(2);\n  var addressType = data.readUInt8(3) === 0x01 ? 'random': 'public';\n  var address = data.slice(4, 10).toString('hex').match(/.{1,2}/g).reverse().join(':');\n  var interval = data.readUInt16LE(10) * 1.25;\n  var latency = data.readUInt16LE(12); // TODO: multiplier?\n  var supervisionTimeout = data.readUInt16LE(14) * 10;\n  var masterClockAccuracy = data.readUInt8(16); // TODO: multiplier?\n\n  debug('\\t\\t\\thandle = ' + handle);\n  debug('\\t\\t\\trole = ' + role);\n  debug('\\t\\t\\taddress type = ' + addressType);\n  debug('\\t\\t\\taddress = ' + address);\n  debug('\\t\\t\\tinterval = ' + interval);\n  debug('\\t\\t\\tlatency = ' + latency);\n  debug('\\t\\t\\tsupervision timeout = ' + supervisionTimeout);\n  debug('\\t\\t\\tmaster clock accuracy = ' + masterClockAccuracy);\n\n  this.emit('leConnComplete', status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy);\n};\n\nHci.prototype.processLeAdvertisingReport = function(count, data) {\n  for (var i = 0; i < count; i++) {\n    var type = data.readUInt8(0);\n    var addressType = data.readUInt8(1) === 0x01 ? 'random' : 'public';\n    var address = data.slice(2, 8).toString('hex').match(/.{1,2}/g).reverse().join(':');\n    var eirLength = data.readUInt8(8);\n    var eir = data.slice(9, eirLength + 9);\n    var rssi = data.readInt8(eirLength + 9);\n\n    debug('\\t\\t\\ttype = ' + type);\n    debug('\\t\\t\\taddress = ' + address);\n    debug('\\t\\t\\taddress type = ' + addressType);\n    debug('\\t\\t\\teir = ' + eir.toString('hex'));\n    debug('\\t\\t\\trssi = ' + rssi);\n\n    this.emit('leAdvertisingReport', 0, type, address, addressType, eir, rssi);\n\n    data = data.slice(eirLength + 10);\n  }\n};\n\nHci.prototype.processLeConnUpdateComplete = function(status, data) {\n  var handle = data.readUInt16LE(0);\n  var interval = data.readUInt16LE(2) * 1.25;\n  var latency = data.readUInt16LE(4); // TODO: multiplier?\n  var supervisionTimeout = data.readUInt16LE(6) * 10;\n\n  debug('\\t\\t\\thandle = ' + handle);\n  debug('\\t\\t\\tinterval = ' + interval);\n  debug('\\t\\t\\tlatency = ' + latency);\n  debug('\\t\\t\\tsupervision timeout = ' + supervisionTimeout);\n\n  this.emit('leConnUpdateComplete', status, handle, interval, latency, supervisionTimeout);\n};\n\nHci.prototype.processCmdStatusEvent = function(cmd, status) {\n  if (cmd === LE_CREATE_CONN_CMD) {\n    if (status !== 0) {\n      this.emit('leConnComplete', status);\n    }\n  }\n};\n\nHci.prototype.onStateChange = function(state) {\n  this._state = state;\n};\n\nmodule.exports = Hci;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/hci-socket/signaling.js":"var debug = require('debug')('signaling');\n\nvar events = require('events');\nvar os = require('os');\nvar util = require('util');\n\nvar CONNECTION_PARAMETER_UPDATE_REQUEST  = 0x12;\nvar CONNECTION_PARAMETER_UPDATE_RESPONSE = 0x13;\n\nvar SIGNALING_CID = 0x0005;\n\nvar Signaling = function(handle, aclStream) {\n  this._handle = handle;\n  this._aclStream = aclStream;\n\n  this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n  this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n  this._aclStream.on('data', this.onAclStreamDataBinded);\n  this._aclStream.on('end', this.onAclStreamEndBinded);\n};\n\nutil.inherits(Signaling, events.EventEmitter);\n\nSignaling.prototype.onAclStreamData = function(cid, data) {\n  if (cid !== SIGNALING_CID) {\n    return;\n  }\n\n  debug('onAclStreamData: ' + data.toString('hex'));\n\n  var code = data.readUInt8(0);\n  var identifier = data.readUInt8(1);\n  var length = data.readUInt16LE(2);\n  var signalingData = data.slice(4);\n\n  debug('\\tcode = ' + code);\n  debug('\\tidentifier = ' + identifier);\n  debug('\\tlength = ' + length);\n\n  if (code === CONNECTION_PARAMETER_UPDATE_REQUEST) {\n    this.processConnectionParameterUpdateRequest(identifier, signalingData);\n  }\n};\n\nSignaling.prototype.onAclStreamEnd = function() {\n  this._aclStream.removeListener('data', this.onAclStreamDataBinded);\n  this._aclStream.removeListener('end', this.onAclStreamEndBinded);\n};\n\nSignaling.prototype.processConnectionParameterUpdateRequest = function(identifier, data) {\n  var minInterval = data.readUInt16LE(0) * 1.25;\n  var maxInterval = data.readUInt16LE(2) * 1.25;\n  var latency = data.readUInt16LE(4);\n  var supervisionTimeout = data.readUInt16LE(6) * 10;\n\n  debug('\\t\\tmin interval = ', minInterval);\n  debug('\\t\\tmax interval = ', maxInterval);\n  debug('\\t\\tlatency = ', latency);\n  debug('\\t\\tsupervision timeout = ', supervisionTimeout);\n\n  if (os.platform() !== 'linux' || process.env.HCI_CHANNEL_USER) {\n    var response = new Buffer(6);\n\n    response.writeUInt8(CONNECTION_PARAMETER_UPDATE_RESPONSE, 0); // code\n    response.writeUInt8(identifier, 1); // identifier\n    response.writeUInt16LE(2, 2); // length\n    response.writeUInt16LE(0, 4);\n\n    this._aclStream.write(SIGNALING_CID, response);\n\n    this.emit('connectionParameterUpdateRequest', this._handle, minInterval, maxInterval, latency, supervisionTimeout);\n  }\n};\n\nmodule.exports = Signaling;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/lib/resolve-bindings-web.js":"function resolveBindings(){\n  if (navigator.bluetooth && !process.env.NOBLE_WEBSOCKET) {\n    return require('./webbluetooth/bindings');\n  }\n\n  return require('./websocket/bindings');\n}\n\nmodule.exports = resolveBindings;\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/with-bindings.js":"var Noble = require('./lib/noble');\n\nmodule.exports = function(bindings) {\n  return new Noble(bindings);\n};\n","/home/travis/build/npmtest/node-npmtest-noble/node_modules/noble/ws-slave.js":"/* jshint loopfunc: true */\nvar events = require('events');\n\nvar debug = require('debug')('slave');\nvar WebSocket = require('ws');\n\nvar noble = require('./index');\n\nvar serverMode = !process.argv[2];\nvar port = 0xB1e;\nvar host = process.argv[2];\n\n\nvar ws;\nvar wss;\n\nif (serverMode) {\n  console.log('noble - ws slave - server mode');\n  wss = new WebSocket.Server({\n    port: 0xB1e\n  });\n\n  wss.on('connection', function(ws_) {\n    console.log('ws -> connection');\n\n    ws = ws_;\n\n    sendEvent({\n      type: 'stateChange',\n      state: noble.state\n    });\n\n    ws.on('message', onMessage);\n\n    ws.on('close', function() {\n      console.log('ws -> close');\n\n      noble.stopScanning();\n    });\n  });\n} else {\n  ws = new WebSocket('ws://' + host + ':' + port);\n\n  ws.on('open', function() {\n    console.log('ws -> open');\n  });\n\n  ws.on('message', function(message) {\n    onMessage(message);\n  });\n\n  ws.on('close', function() {\n    console.log('ws -> close');\n\n    noble.stopScanning();\n  });\n}\n\nvar peripherals = {};\n\n// TODO: open/close ws on state change\n\nfunction sendEvent(event) {\n  var message = JSON.stringify(event);\n\n  console.log('ws -> send: ' + message);\n\n  var clients = serverMode ? wss.clients : [ws];\n\n  for (var i = 0; i < clients.length; i++) {\n    clients[i].send(message);\n  }\n}\n\nvar onMessage = function(message) {\n  console.log('ws -> message: ' + message);\n\n  var command = JSON.parse(message);\n\n  var action = command.action;\n  var peripheralUuid = command.peripheralUuid;\n  var serviceUuids = command.serviceUuids;\n  var serviceUuid = command.serviceUuid;\n  var characteristicUuids = command.characteristicUuids;\n  var characteristicUuid = command.characteristicUuid;\n  var data = command.data ? new Buffer(command.data, 'hex') : null;\n  var withoutResponse = command.withoutResponse;\n  var broadcast = command.broadcast;\n  var notify = command.notify;\n  var descriptorUuid = command.descriptorUuid;\n  var handle = handle;\n\n  var peripheral = peripherals[peripheralUuid];\n  var service = null;\n  var characteristic = null;\n  var descriptor = null;\n\n\n  if (peripheral && serviceUuid) {\n    var services = peripheral.services;\n\n    for (var i in services) {\n      if (services[i].uuid === serviceUuid) {\n        service = services[i];\n\n        if (characteristicUuid) {\n          var characteristics = service.characteristics;\n\n          for (var j in characteristics) {\n            if (characteristics[j].uuid === characteristicUuid) {\n              characteristic = characteristics[j];\n\n              if (descriptorUuid) {\n                var descriptors = characteristic.descriptors;\n\n                for (var k in descriptors) {\n                  if (descriptors[k].uuid === descriptorUuid) {\n                    descriptor = descriptors[k];\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  if (action === 'startScanning') {\n    noble.startScanning(serviceUuids, command.allowDuplicates);\n  } else if (action === 'stopScanning') {\n    noble.stopScanning();\n  } else if (action === 'connect') {\n    peripheral.connect();\n  } else if (action === 'disconnect') {\n    peripheral.disconnect();\n  } else if (action === 'updateRssi') {\n    peripheral.updateRssi();\n  } else if (action === 'discoverServices') {\n    peripheral.discoverServices(command.uuids);\n  } else if (action === 'discoverIncludedServices') {\n    service.discoverIncludedServices(serviceUuids);\n  } else if (action === 'discoverCharacteristics') {\n    service.discoverCharacteristics(characteristicUuids);\n  } else if (action === 'read') {\n    characteristic.read();\n  } else if (action === 'write') {\n    characteristic.write(data, withoutResponse);\n  } else if (action === 'broadcast') {\n    characteristic.broadcast(broadcast);\n  } else if (action === 'notify') {\n    characteristic.notify(notify);\n  } else if (action === 'discoverDescriptors') {\n    characteristic.discoverDescriptors();\n  } else if (action === 'readValue') {\n    descriptor.readValue();\n  } else if (action === 'writeValue') {\n    descriptor.writeValue(data);\n  } else if (action === 'readHandle') {\n    peripheral.readHandle(handle);\n  } else if (action === 'writeHandle') {\n    peripheral.writeHandle(handle, data, withoutResponse);\n  }\n};\n\nnoble.on('discover', function(peripheral) {\n  peripherals[peripheral.uuid] = peripheral;\n\n  peripheral.on('connect', function() {\n    sendEvent({\n      type: 'connect',\n      peripheralUuid: this.uuid\n    });\n  });\n\n  peripheral.on('disconnect', function() {\n    sendEvent({\n      type: 'disconnect',\n      peripheralUuid: this.uuid\n    });\n\n    for (var i in this.services) {\n      for (var j in this.services[i].characteristics) {\n        for (var k in this.services[i].characteristics[j].descriptors) {\n          this.services[i].characteristics[j].descriptors[k].removeAllListeners();\n        }\n\n        this.services[i].characteristics[j].removeAllListeners();\n      }\n      this.services[i].removeAllListeners();\n    }\n\n    this.removeAllListeners();\n  });\n\n  peripheral.on('rssiUpdate', function(rssi) {\n    sendEvent({\n      type: 'rssiUpdate',\n      peripheralUuid: this.uuid,\n      rssi: rssi\n    });\n  });\n\n  peripheral.on('servicesDiscover', function(services) {\n    var peripheral = this;\n    var serviceUuids = [];\n\n    var includedServicesDiscover = function(includedServiceUuids) {\n      sendEvent({\n        type: 'includedServicesDiscover',\n        peripheralUuid: peripheral.uuid,\n        serviceUuid: this.uuid,\n        includedServiceUuids: includedServiceUuids\n      });\n    };\n\n    var characteristicsDiscover = function(characteristics) {\n      var service = this;\n      var discoveredCharacteristics = [];\n\n      var read = function(data, isNotification) {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'read',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid,\n          data: data.toString('hex'),\n          isNotification: isNotification\n        });\n      };\n\n      var write = function() {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'write',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid\n        });\n      };\n\n      var broadcast = function(state) {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'broadcast',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid,\n          state: state\n        });\n      };\n\n      var notify = function(state) {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'notify',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid,\n          state: state\n        });\n      };\n\n      var descriptorsDiscover = function(descriptors) {\n        var characteristic = this;\n\n        var discoveredDescriptors = [];\n\n        var valueRead = function(data) {\n          var descriptor = this;\n\n          sendEvent({\n            type: 'valueRead',\n            peripheralUuid: peripheral.uuid,\n            serviceUuid: service.uuid,\n            characteristicUuid: characteristic.uuid,\n            descriptorUuid: descriptor.uuid,\n            data: data.toString('hex')\n          });\n        };\n\n        var valueWrite = function(data) {\n          var descriptor = this;\n\n          sendEvent({\n            type: 'valueWrite',\n            peripheralUuid: peripheral.uuid,\n            serviceUuid: service.uuid,\n            characteristicUuid: characteristic.uuid,\n            descriptorUuid: descriptor.uuid\n          });\n        };\n\n        for (var k in descriptors) {\n          descriptors[k].on('valueRead', valueRead);\n\n          descriptors[k].on('valueWrite', valueWrite);\n\n          discoveredDescriptors.push(descriptors[k].uuid);\n        }\n\n        sendEvent({\n          type: 'descriptorsDiscover',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: this.uuid,\n          descriptors: discoveredDescriptors\n        });\n      };\n\n      for (var j = 0; j < characteristics.length; j++) {\n        characteristics[j].on('read', read);\n\n        characteristics[j].on('write', write);\n\n        characteristics[j].on('broadcast', broadcast);\n\n        characteristics[j].on('notify', notify);\n\n        characteristics[j].on('descriptorsDiscover', descriptorsDiscover);\n\n        discoveredCharacteristics.push({\n          uuid: characteristics[j].uuid,\n          properties: characteristics[j].properties\n        });\n      }\n\n      sendEvent({\n        type: 'characteristicsDiscover',\n        peripheralUuid: peripheral.uuid,\n        serviceUuid: this.uuid,\n        characteristics: discoveredCharacteristics\n      });\n    };\n\n    for (var i in services) {\n      services[i].on('includedServicesDiscover', includedServicesDiscover);\n\n      services[i].on('characteristicsDiscover', characteristicsDiscover);\n\n      serviceUuids.push(services[i].uuid);\n    }\n\n    sendEvent({\n      type: 'servicesDiscover',\n      peripheralUuid: this.uuid,\n      serviceUuids: serviceUuids\n    });\n  });\n\n  peripheral.on('handleRead', function(handle, data) {\n    sendEvent({\n      type: 'handleRead',\n      peripheralUuid: this.uuid,\n      handle: handle,\n      data: data.toString('hex')\n    });\n  });\n\n  peripheral.on('handleWrite', function(handle) {\n    sendEvent({\n      type: 'handleWrite',\n      peripheralUuid: this.uuid,\n      handle: handle\n    });\n  });\n\n  peripheral.on('handleNotify', function(handle, data) {\n    sendEvent({\n      type: 'handleNotify',\n      peripheralUuid: this.uuid,\n      handle: handle,\n      data: data.toString('hex')\n    });\n  });\n\n  sendEvent({\n    type: 'discover',\n    peripheralUuid: peripheral.uuid,\n    address: peripheral.address,\n    addressType: peripheral.addressType,\n    connectable: peripheral.connectable,\n    advertisement: {\n      localName: peripheral.advertisement.localName,\n      txPowerLevel: peripheral.advertisement.txPowerLevel,\n      serviceUuids: peripheral.advertisement.serviceUuids,\n      manufacturerData: (peripheral.advertisement.manufacturerData ? peripheral.advertisement.manufacturerData.toString('hex') : null),\n      serviceData: (peripheral.advertisement.serviceData ? peripheral.advertisement.serviceData.toString('hex') : null)\n    },\n    rssi: peripheral.rssi\n  });\n});"}